// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Room.pb.h"

@implementation RoomRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [RoomRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface GetRoomListReq ()
@property int64_t roomId;
@property int32_t count;
@end

@implementation GetRoomListReq

- (BOOL) hasRoomId {
  return !!hasRoomId_;
}
- (void) setHasRoomId:(BOOL) value {
  hasRoomId_ = !!value;
}
@synthesize roomId;
- (BOOL) hasCount {
  return !!hasCount_;
}
- (void) setHasCount:(BOOL) value {
  hasCount_ = !!value;
}
@synthesize count;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.roomId = 0L;
    self.count = 0;
  }
  return self;
}
static GetRoomListReq* defaultGetRoomListReqInstance = nil;
+ (void) initialize {
  if (self == [GetRoomListReq class]) {
    defaultGetRoomListReqInstance = [[GetRoomListReq alloc] init];
  }
}
+ (GetRoomListReq*) defaultInstance {
  return defaultGetRoomListReqInstance;
}
- (GetRoomListReq*) defaultInstance {
  return defaultGetRoomListReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasRoomId) {
    return NO;
  }
  if (!self.hasCount) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRoomId) {
    [output writeInt64:1 value:self.roomId];
  }
  if (self.hasCount) {
    [output writeInt32:2 value:self.count];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasRoomId) {
    size += computeInt64Size(1, self.roomId);
  }
  if (self.hasCount) {
    size += computeInt32Size(2, self.count);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (GetRoomListReq*) parseFromData:(NSData*) data {
  return (GetRoomListReq*)[[[GetRoomListReq builder] mergeFromData:data] build];
}
+ (GetRoomListReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GetRoomListReq*)[[[GetRoomListReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (GetRoomListReq*) parseFromInputStream:(NSInputStream*) input {
  return (GetRoomListReq*)[[[GetRoomListReq builder] mergeFromInputStream:input] build];
}
+ (GetRoomListReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GetRoomListReq*)[[[GetRoomListReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GetRoomListReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (GetRoomListReq*)[[[GetRoomListReq builder] mergeFromCodedInputStream:input] build];
}
+ (GetRoomListReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GetRoomListReq*)[[[GetRoomListReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GetRoomListReq_Builder*) builder {
  return [[[GetRoomListReq_Builder alloc] init] autorelease];
}
+ (GetRoomListReq_Builder*) builderWithPrototype:(GetRoomListReq*) prototype {
  return [[GetRoomListReq builder] mergeFrom:prototype];
}
- (GetRoomListReq_Builder*) builder {
  return [GetRoomListReq builder];
}
@end

@interface GetRoomListReq_Builder()
@property (retain) GetRoomListReq* result;
@end

@implementation GetRoomListReq_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[GetRoomListReq alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (GetRoomListReq_Builder*) clear {
  self.result = [[[GetRoomListReq alloc] init] autorelease];
  return self;
}
- (GetRoomListReq_Builder*) clone {
  return [GetRoomListReq builderWithPrototype:result];
}
- (GetRoomListReq*) defaultInstance {
  return [GetRoomListReq defaultInstance];
}
- (GetRoomListReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (GetRoomListReq*) buildPartial {
  GetRoomListReq* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (GetRoomListReq_Builder*) mergeFrom:(GetRoomListReq*) other {
  if (other == [GetRoomListReq defaultInstance]) {
    return self;
  }
  if (other.hasRoomId) {
    [self setRoomId:other.roomId];
  }
  if (other.hasCount) {
    [self setCount:other.count];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (GetRoomListReq_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (GetRoomListReq_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setRoomId:[input readInt64]];
        break;
      }
      case 16: {
        [self setCount:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasRoomId {
  return result.hasRoomId;
}
- (int64_t) roomId {
  return result.roomId;
}
- (GetRoomListReq_Builder*) setRoomId:(int64_t) value {
  result.hasRoomId = YES;
  result.roomId = value;
  return self;
}
- (GetRoomListReq_Builder*) clearRoomId {
  result.hasRoomId = NO;
  result.roomId = 0L;
  return self;
}
- (BOOL) hasCount {
  return result.hasCount;
}
- (int32_t) count {
  return result.count;
}
- (GetRoomListReq_Builder*) setCount:(int32_t) value {
  result.hasCount = YES;
  result.count = value;
  return self;
}
- (GetRoomListReq_Builder*) clearCount {
  result.hasCount = NO;
  result.count = 0;
  return self;
}
@end

@interface RoomInfo ()
@property int32_t roomId;
@property (retain) NSString* roomName;
@property (retain) NSString* roomDesc;
@property int32_t needRank;
@property int32_t lowCoin;
@property (retain) NSString* roomPic;
@end

@implementation RoomInfo

- (BOOL) hasRoomId {
  return !!hasRoomId_;
}
- (void) setHasRoomId:(BOOL) value {
  hasRoomId_ = !!value;
}
@synthesize roomId;
- (BOOL) hasRoomName {
  return !!hasRoomName_;
}
- (void) setHasRoomName:(BOOL) value {
  hasRoomName_ = !!value;
}
@synthesize roomName;
- (BOOL) hasRoomDesc {
  return !!hasRoomDesc_;
}
- (void) setHasRoomDesc:(BOOL) value {
  hasRoomDesc_ = !!value;
}
@synthesize roomDesc;
- (BOOL) hasNeedRank {
  return !!hasNeedRank_;
}
- (void) setHasNeedRank:(BOOL) value {
  hasNeedRank_ = !!value;
}
@synthesize needRank;
- (BOOL) hasLowCoin {
  return !!hasLowCoin_;
}
- (void) setHasLowCoin:(BOOL) value {
  hasLowCoin_ = !!value;
}
@synthesize lowCoin;
- (BOOL) hasRoomPic {
  return !!hasRoomPic_;
}
- (void) setHasRoomPic:(BOOL) value {
  hasRoomPic_ = !!value;
}
@synthesize roomPic;
- (void) dealloc {
  self.roomName = nil;
  self.roomDesc = nil;
  self.roomPic = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.roomId = 0;
    self.roomName = @"";
    self.roomDesc = @"";
    self.needRank = 0;
    self.lowCoin = 0;
    self.roomPic = @"";
  }
  return self;
}
static RoomInfo* defaultRoomInfoInstance = nil;
+ (void) initialize {
  if (self == [RoomInfo class]) {
    defaultRoomInfoInstance = [[RoomInfo alloc] init];
  }
}
+ (RoomInfo*) defaultInstance {
  return defaultRoomInfoInstance;
}
- (RoomInfo*) defaultInstance {
  return defaultRoomInfoInstance;
}
- (BOOL) isInitialized {
  if (!self.hasRoomId) {
    return NO;
  }
  if (!self.hasRoomName) {
    return NO;
  }
  if (!self.hasRoomDesc) {
    return NO;
  }
  if (!self.hasNeedRank) {
    return NO;
  }
  if (!self.hasLowCoin) {
    return NO;
  }
  if (!self.hasRoomPic) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRoomId) {
    [output writeInt32:1 value:self.roomId];
  }
  if (self.hasRoomName) {
    [output writeString:2 value:self.roomName];
  }
  if (self.hasRoomDesc) {
    [output writeString:3 value:self.roomDesc];
  }
  if (self.hasNeedRank) {
    [output writeInt32:4 value:self.needRank];
  }
  if (self.hasLowCoin) {
    [output writeInt32:5 value:self.lowCoin];
  }
  if (self.hasRoomPic) {
    [output writeString:6 value:self.roomPic];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasRoomId) {
    size += computeInt32Size(1, self.roomId);
  }
  if (self.hasRoomName) {
    size += computeStringSize(2, self.roomName);
  }
  if (self.hasRoomDesc) {
    size += computeStringSize(3, self.roomDesc);
  }
  if (self.hasNeedRank) {
    size += computeInt32Size(4, self.needRank);
  }
  if (self.hasLowCoin) {
    size += computeInt32Size(5, self.lowCoin);
  }
  if (self.hasRoomPic) {
    size += computeStringSize(6, self.roomPic);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (RoomInfo*) parseFromData:(NSData*) data {
  return (RoomInfo*)[[[RoomInfo builder] mergeFromData:data] build];
}
+ (RoomInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomInfo*)[[[RoomInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RoomInfo*) parseFromInputStream:(NSInputStream*) input {
  return (RoomInfo*)[[[RoomInfo builder] mergeFromInputStream:input] build];
}
+ (RoomInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomInfo*)[[[RoomInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RoomInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RoomInfo*)[[[RoomInfo builder] mergeFromCodedInputStream:input] build];
}
+ (RoomInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomInfo*)[[[RoomInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RoomInfo_Builder*) builder {
  return [[[RoomInfo_Builder alloc] init] autorelease];
}
+ (RoomInfo_Builder*) builderWithPrototype:(RoomInfo*) prototype {
  return [[RoomInfo builder] mergeFrom:prototype];
}
- (RoomInfo_Builder*) builder {
  return [RoomInfo builder];
}
@end

@interface RoomInfo_Builder()
@property (retain) RoomInfo* result;
@end

@implementation RoomInfo_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[RoomInfo alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (RoomInfo_Builder*) clear {
  self.result = [[[RoomInfo alloc] init] autorelease];
  return self;
}
- (RoomInfo_Builder*) clone {
  return [RoomInfo builderWithPrototype:result];
}
- (RoomInfo*) defaultInstance {
  return [RoomInfo defaultInstance];
}
- (RoomInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RoomInfo*) buildPartial {
  RoomInfo* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (RoomInfo_Builder*) mergeFrom:(RoomInfo*) other {
  if (other == [RoomInfo defaultInstance]) {
    return self;
  }
  if (other.hasRoomId) {
    [self setRoomId:other.roomId];
  }
  if (other.hasRoomName) {
    [self setRoomName:other.roomName];
  }
  if (other.hasRoomDesc) {
    [self setRoomDesc:other.roomDesc];
  }
  if (other.hasNeedRank) {
    [self setNeedRank:other.needRank];
  }
  if (other.hasLowCoin) {
    [self setLowCoin:other.lowCoin];
  }
  if (other.hasRoomPic) {
    [self setRoomPic:other.roomPic];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RoomInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RoomInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setRoomId:[input readInt32]];
        break;
      }
      case 18: {
        [self setRoomName:[input readString]];
        break;
      }
      case 26: {
        [self setRoomDesc:[input readString]];
        break;
      }
      case 32: {
        [self setNeedRank:[input readInt32]];
        break;
      }
      case 40: {
        [self setLowCoin:[input readInt32]];
        break;
      }
      case 50: {
        [self setRoomPic:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasRoomId {
  return result.hasRoomId;
}
- (int32_t) roomId {
  return result.roomId;
}
- (RoomInfo_Builder*) setRoomId:(int32_t) value {
  result.hasRoomId = YES;
  result.roomId = value;
  return self;
}
- (RoomInfo_Builder*) clearRoomId {
  result.hasRoomId = NO;
  result.roomId = 0;
  return self;
}
- (BOOL) hasRoomName {
  return result.hasRoomName;
}
- (NSString*) roomName {
  return result.roomName;
}
- (RoomInfo_Builder*) setRoomName:(NSString*) value {
  result.hasRoomName = YES;
  result.roomName = value;
  return self;
}
- (RoomInfo_Builder*) clearRoomName {
  result.hasRoomName = NO;
  result.roomName = @"";
  return self;
}
- (BOOL) hasRoomDesc {
  return result.hasRoomDesc;
}
- (NSString*) roomDesc {
  return result.roomDesc;
}
- (RoomInfo_Builder*) setRoomDesc:(NSString*) value {
  result.hasRoomDesc = YES;
  result.roomDesc = value;
  return self;
}
- (RoomInfo_Builder*) clearRoomDesc {
  result.hasRoomDesc = NO;
  result.roomDesc = @"";
  return self;
}
- (BOOL) hasNeedRank {
  return result.hasNeedRank;
}
- (int32_t) needRank {
  return result.needRank;
}
- (RoomInfo_Builder*) setNeedRank:(int32_t) value {
  result.hasNeedRank = YES;
  result.needRank = value;
  return self;
}
- (RoomInfo_Builder*) clearNeedRank {
  result.hasNeedRank = NO;
  result.needRank = 0;
  return self;
}
- (BOOL) hasLowCoin {
  return result.hasLowCoin;
}
- (int32_t) lowCoin {
  return result.lowCoin;
}
- (RoomInfo_Builder*) setLowCoin:(int32_t) value {
  result.hasLowCoin = YES;
  result.lowCoin = value;
  return self;
}
- (RoomInfo_Builder*) clearLowCoin {
  result.hasLowCoin = NO;
  result.lowCoin = 0;
  return self;
}
- (BOOL) hasRoomPic {
  return result.hasRoomPic;
}
- (NSString*) roomPic {
  return result.roomPic;
}
- (RoomInfo_Builder*) setRoomPic:(NSString*) value {
  result.hasRoomPic = YES;
  result.roomPic = value;
  return self;
}
- (RoomInfo_Builder*) clearRoomPic {
  result.hasRoomPic = NO;
  result.roomPic = @"";
  return self;
}
@end

@interface GetRoomListRes ()
@property (retain) NSMutableArray* mutableRoomInfosList;
@end

@implementation GetRoomListRes

@synthesize mutableRoomInfosList;
- (void) dealloc {
  self.mutableRoomInfosList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static GetRoomListRes* defaultGetRoomListResInstance = nil;
+ (void) initialize {
  if (self == [GetRoomListRes class]) {
    defaultGetRoomListResInstance = [[GetRoomListRes alloc] init];
  }
}
+ (GetRoomListRes*) defaultInstance {
  return defaultGetRoomListResInstance;
}
- (GetRoomListRes*) defaultInstance {
  return defaultGetRoomListResInstance;
}
- (NSArray*) roomInfosList {
  return mutableRoomInfosList;
}
- (RoomInfo*) roomInfosAtIndex:(int32_t) index {
  id value = [mutableRoomInfosList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (RoomInfo* element in self.roomInfosList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (RoomInfo* element in self.roomInfosList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (RoomInfo* element in self.roomInfosList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (GetRoomListRes*) parseFromData:(NSData*) data {
  return (GetRoomListRes*)[[[GetRoomListRes builder] mergeFromData:data] build];
}
+ (GetRoomListRes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GetRoomListRes*)[[[GetRoomListRes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (GetRoomListRes*) parseFromInputStream:(NSInputStream*) input {
  return (GetRoomListRes*)[[[GetRoomListRes builder] mergeFromInputStream:input] build];
}
+ (GetRoomListRes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GetRoomListRes*)[[[GetRoomListRes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GetRoomListRes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (GetRoomListRes*)[[[GetRoomListRes builder] mergeFromCodedInputStream:input] build];
}
+ (GetRoomListRes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GetRoomListRes*)[[[GetRoomListRes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GetRoomListRes_Builder*) builder {
  return [[[GetRoomListRes_Builder alloc] init] autorelease];
}
+ (GetRoomListRes_Builder*) builderWithPrototype:(GetRoomListRes*) prototype {
  return [[GetRoomListRes builder] mergeFrom:prototype];
}
- (GetRoomListRes_Builder*) builder {
  return [GetRoomListRes builder];
}
@end

@interface GetRoomListRes_Builder()
@property (retain) GetRoomListRes* result;
@end

@implementation GetRoomListRes_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[GetRoomListRes alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (GetRoomListRes_Builder*) clear {
  self.result = [[[GetRoomListRes alloc] init] autorelease];
  return self;
}
- (GetRoomListRes_Builder*) clone {
  return [GetRoomListRes builderWithPrototype:result];
}
- (GetRoomListRes*) defaultInstance {
  return [GetRoomListRes defaultInstance];
}
- (GetRoomListRes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (GetRoomListRes*) buildPartial {
  GetRoomListRes* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (GetRoomListRes_Builder*) mergeFrom:(GetRoomListRes*) other {
  if (other == [GetRoomListRes defaultInstance]) {
    return self;
  }
  if (other.mutableRoomInfosList.count > 0) {
    if (result.mutableRoomInfosList == nil) {
      result.mutableRoomInfosList = [NSMutableArray array];
    }
    [result.mutableRoomInfosList addObjectsFromArray:other.mutableRoomInfosList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (GetRoomListRes_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (GetRoomListRes_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        RoomInfo_Builder* subBuilder = [RoomInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRoomInfos:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) roomInfosList {
  if (result.mutableRoomInfosList == nil) { return [NSArray array]; }
  return result.mutableRoomInfosList;
}
- (RoomInfo*) roomInfosAtIndex:(int32_t) index {
  return [result roomInfosAtIndex:index];
}
- (GetRoomListRes_Builder*) replaceRoomInfosAtIndex:(int32_t) index with:(RoomInfo*) value {
  [result.mutableRoomInfosList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (GetRoomListRes_Builder*) addAllRoomInfos:(NSArray*) values {
  if (result.mutableRoomInfosList == nil) {
    result.mutableRoomInfosList = [NSMutableArray array];
  }
  [result.mutableRoomInfosList addObjectsFromArray:values];
  return self;
}
- (GetRoomListRes_Builder*) clearRoomInfosList {
  result.mutableRoomInfosList = nil;
  return self;
}
- (GetRoomListRes_Builder*) addRoomInfos:(RoomInfo*) value {
  if (result.mutableRoomInfosList == nil) {
    result.mutableRoomInfosList = [NSMutableArray array];
  }
  [result.mutableRoomInfosList addObject:value];
  return self;
}
@end

@interface EnterRoomReq ()
@property int32_t roomId;
@end

@implementation EnterRoomReq

- (BOOL) hasRoomId {
  return !!hasRoomId_;
}
- (void) setHasRoomId:(BOOL) value {
  hasRoomId_ = !!value;
}
@synthesize roomId;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.roomId = 0;
  }
  return self;
}
static EnterRoomReq* defaultEnterRoomReqInstance = nil;
+ (void) initialize {
  if (self == [EnterRoomReq class]) {
    defaultEnterRoomReqInstance = [[EnterRoomReq alloc] init];
  }
}
+ (EnterRoomReq*) defaultInstance {
  return defaultEnterRoomReqInstance;
}
- (EnterRoomReq*) defaultInstance {
  return defaultEnterRoomReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasRoomId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRoomId) {
    [output writeInt32:1 value:self.roomId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasRoomId) {
    size += computeInt32Size(1, self.roomId);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (EnterRoomReq*) parseFromData:(NSData*) data {
  return (EnterRoomReq*)[[[EnterRoomReq builder] mergeFromData:data] build];
}
+ (EnterRoomReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (EnterRoomReq*)[[[EnterRoomReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (EnterRoomReq*) parseFromInputStream:(NSInputStream*) input {
  return (EnterRoomReq*)[[[EnterRoomReq builder] mergeFromInputStream:input] build];
}
+ (EnterRoomReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (EnterRoomReq*)[[[EnterRoomReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (EnterRoomReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (EnterRoomReq*)[[[EnterRoomReq builder] mergeFromCodedInputStream:input] build];
}
+ (EnterRoomReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (EnterRoomReq*)[[[EnterRoomReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (EnterRoomReq_Builder*) builder {
  return [[[EnterRoomReq_Builder alloc] init] autorelease];
}
+ (EnterRoomReq_Builder*) builderWithPrototype:(EnterRoomReq*) prototype {
  return [[EnterRoomReq builder] mergeFrom:prototype];
}
- (EnterRoomReq_Builder*) builder {
  return [EnterRoomReq builder];
}
@end

@interface EnterRoomReq_Builder()
@property (retain) EnterRoomReq* result;
@end

@implementation EnterRoomReq_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[EnterRoomReq alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (EnterRoomReq_Builder*) clear {
  self.result = [[[EnterRoomReq alloc] init] autorelease];
  return self;
}
- (EnterRoomReq_Builder*) clone {
  return [EnterRoomReq builderWithPrototype:result];
}
- (EnterRoomReq*) defaultInstance {
  return [EnterRoomReq defaultInstance];
}
- (EnterRoomReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (EnterRoomReq*) buildPartial {
  EnterRoomReq* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (EnterRoomReq_Builder*) mergeFrom:(EnterRoomReq*) other {
  if (other == [EnterRoomReq defaultInstance]) {
    return self;
  }
  if (other.hasRoomId) {
    [self setRoomId:other.roomId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (EnterRoomReq_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (EnterRoomReq_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setRoomId:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasRoomId {
  return result.hasRoomId;
}
- (int32_t) roomId {
  return result.roomId;
}
- (EnterRoomReq_Builder*) setRoomId:(int32_t) value {
  result.hasRoomId = YES;
  result.roomId = value;
  return self;
}
- (EnterRoomReq_Builder*) clearRoomId {
  result.hasRoomId = NO;
  result.roomId = 0;
  return self;
}
@end

@interface EnterRoomRes ()
@property int32_t roomId;
@property int32_t deskId;
@end

@implementation EnterRoomRes

- (BOOL) hasRoomId {
  return !!hasRoomId_;
}
- (void) setHasRoomId:(BOOL) value {
  hasRoomId_ = !!value;
}
@synthesize roomId;
- (BOOL) hasDeskId {
  return !!hasDeskId_;
}
- (void) setHasDeskId:(BOOL) value {
  hasDeskId_ = !!value;
}
@synthesize deskId;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.roomId = 0;
    self.deskId = 0;
  }
  return self;
}
static EnterRoomRes* defaultEnterRoomResInstance = nil;
+ (void) initialize {
  if (self == [EnterRoomRes class]) {
    defaultEnterRoomResInstance = [[EnterRoomRes alloc] init];
  }
}
+ (EnterRoomRes*) defaultInstance {
  return defaultEnterRoomResInstance;
}
- (EnterRoomRes*) defaultInstance {
  return defaultEnterRoomResInstance;
}
- (BOOL) isInitialized {
  if (!self.hasRoomId) {
    return NO;
  }
  if (!self.hasDeskId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRoomId) {
    [output writeInt32:1 value:self.roomId];
  }
  if (self.hasDeskId) {
    [output writeInt32:2 value:self.deskId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasRoomId) {
    size += computeInt32Size(1, self.roomId);
  }
  if (self.hasDeskId) {
    size += computeInt32Size(2, self.deskId);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (EnterRoomRes*) parseFromData:(NSData*) data {
  return (EnterRoomRes*)[[[EnterRoomRes builder] mergeFromData:data] build];
}
+ (EnterRoomRes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (EnterRoomRes*)[[[EnterRoomRes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (EnterRoomRes*) parseFromInputStream:(NSInputStream*) input {
  return (EnterRoomRes*)[[[EnterRoomRes builder] mergeFromInputStream:input] build];
}
+ (EnterRoomRes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (EnterRoomRes*)[[[EnterRoomRes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (EnterRoomRes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (EnterRoomRes*)[[[EnterRoomRes builder] mergeFromCodedInputStream:input] build];
}
+ (EnterRoomRes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (EnterRoomRes*)[[[EnterRoomRes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (EnterRoomRes_Builder*) builder {
  return [[[EnterRoomRes_Builder alloc] init] autorelease];
}
+ (EnterRoomRes_Builder*) builderWithPrototype:(EnterRoomRes*) prototype {
  return [[EnterRoomRes builder] mergeFrom:prototype];
}
- (EnterRoomRes_Builder*) builder {
  return [EnterRoomRes builder];
}
@end

@interface EnterRoomRes_Builder()
@property (retain) EnterRoomRes* result;
@end

@implementation EnterRoomRes_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[EnterRoomRes alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (EnterRoomRes_Builder*) clear {
  self.result = [[[EnterRoomRes alloc] init] autorelease];
  return self;
}
- (EnterRoomRes_Builder*) clone {
  return [EnterRoomRes builderWithPrototype:result];
}
- (EnterRoomRes*) defaultInstance {
  return [EnterRoomRes defaultInstance];
}
- (EnterRoomRes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (EnterRoomRes*) buildPartial {
  EnterRoomRes* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (EnterRoomRes_Builder*) mergeFrom:(EnterRoomRes*) other {
  if (other == [EnterRoomRes defaultInstance]) {
    return self;
  }
  if (other.hasRoomId) {
    [self setRoomId:other.roomId];
  }
  if (other.hasDeskId) {
    [self setDeskId:other.deskId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (EnterRoomRes_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (EnterRoomRes_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setRoomId:[input readInt32]];
        break;
      }
      case 16: {
        [self setDeskId:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasRoomId {
  return result.hasRoomId;
}
- (int32_t) roomId {
  return result.roomId;
}
- (EnterRoomRes_Builder*) setRoomId:(int32_t) value {
  result.hasRoomId = YES;
  result.roomId = value;
  return self;
}
- (EnterRoomRes_Builder*) clearRoomId {
  result.hasRoomId = NO;
  result.roomId = 0;
  return self;
}
- (BOOL) hasDeskId {
  return result.hasDeskId;
}
- (int32_t) deskId {
  return result.deskId;
}
- (EnterRoomRes_Builder*) setDeskId:(int32_t) value {
  result.hasDeskId = YES;
  result.deskId = value;
  return self;
}
- (EnterRoomRes_Builder*) clearDeskId {
  result.hasDeskId = NO;
  result.deskId = 0;
  return self;
}
@end

@interface AnteInfo ()
@property int32_t point;
@property int32_t count;
@end

@implementation AnteInfo

- (BOOL) hasPoint {
  return !!hasPoint_;
}
- (void) setHasPoint:(BOOL) value {
  hasPoint_ = !!value;
}
@synthesize point;
- (BOOL) hasCount {
  return !!hasCount_;
}
- (void) setHasCount:(BOOL) value {
  hasCount_ = !!value;
}
@synthesize count;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.point = 0;
    self.count = 0;
  }
  return self;
}
static AnteInfo* defaultAnteInfoInstance = nil;
+ (void) initialize {
  if (self == [AnteInfo class]) {
    defaultAnteInfoInstance = [[AnteInfo alloc] init];
  }
}
+ (AnteInfo*) defaultInstance {
  return defaultAnteInfoInstance;
}
- (AnteInfo*) defaultInstance {
  return defaultAnteInfoInstance;
}
- (BOOL) isInitialized {
  if (!self.hasPoint) {
    return NO;
  }
  if (!self.hasCount) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPoint) {
    [output writeInt32:1 value:self.point];
  }
  if (self.hasCount) {
    [output writeInt32:2 value:self.count];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasPoint) {
    size += computeInt32Size(1, self.point);
  }
  if (self.hasCount) {
    size += computeInt32Size(2, self.count);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (AnteInfo*) parseFromData:(NSData*) data {
  return (AnteInfo*)[[[AnteInfo builder] mergeFromData:data] build];
}
+ (AnteInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AnteInfo*)[[[AnteInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AnteInfo*) parseFromInputStream:(NSInputStream*) input {
  return (AnteInfo*)[[[AnteInfo builder] mergeFromInputStream:input] build];
}
+ (AnteInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AnteInfo*)[[[AnteInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AnteInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AnteInfo*)[[[AnteInfo builder] mergeFromCodedInputStream:input] build];
}
+ (AnteInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AnteInfo*)[[[AnteInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AnteInfo_Builder*) builder {
  return [[[AnteInfo_Builder alloc] init] autorelease];
}
+ (AnteInfo_Builder*) builderWithPrototype:(AnteInfo*) prototype {
  return [[AnteInfo builder] mergeFrom:prototype];
}
- (AnteInfo_Builder*) builder {
  return [AnteInfo builder];
}
@end

@interface AnteInfo_Builder()
@property (retain) AnteInfo* result;
@end

@implementation AnteInfo_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[AnteInfo alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (AnteInfo_Builder*) clear {
  self.result = [[[AnteInfo alloc] init] autorelease];
  return self;
}
- (AnteInfo_Builder*) clone {
  return [AnteInfo builderWithPrototype:result];
}
- (AnteInfo*) defaultInstance {
  return [AnteInfo defaultInstance];
}
- (AnteInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AnteInfo*) buildPartial {
  AnteInfo* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (AnteInfo_Builder*) mergeFrom:(AnteInfo*) other {
  if (other == [AnteInfo defaultInstance]) {
    return self;
  }
  if (other.hasPoint) {
    [self setPoint:other.point];
  }
  if (other.hasCount) {
    [self setCount:other.count];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AnteInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AnteInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPoint:[input readInt32]];
        break;
      }
      case 16: {
        [self setCount:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasPoint {
  return result.hasPoint;
}
- (int32_t) point {
  return result.point;
}
- (AnteInfo_Builder*) setPoint:(int32_t) value {
  result.hasPoint = YES;
  result.point = value;
  return self;
}
- (AnteInfo_Builder*) clearPoint {
  result.hasPoint = NO;
  result.point = 0;
  return self;
}
- (BOOL) hasCount {
  return result.hasCount;
}
- (int32_t) count {
  return result.count;
}
- (AnteInfo_Builder*) setCount:(int32_t) value {
  result.hasCount = YES;
  result.count = value;
  return self;
}
- (AnteInfo_Builder*) clearCount {
  result.hasCount = NO;
  result.count = 0;
  return self;
}
@end

@interface RoomUserInfo ()
@property int32_t userId;
@property (retain) NSString* userName;
@property (retain) NSString* userRank;
@property (retain) NSMutableArray* mutableAnteInfosList;
@end

@implementation RoomUserInfo

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
- (BOOL) hasUserName {
  return !!hasUserName_;
}
- (void) setHasUserName:(BOOL) value {
  hasUserName_ = !!value;
}
@synthesize userName;
- (BOOL) hasUserRank {
  return !!hasUserRank_;
}
- (void) setHasUserRank:(BOOL) value {
  hasUserRank_ = !!value;
}
@synthesize userRank;
@synthesize mutableAnteInfosList;
- (void) dealloc {
  self.userName = nil;
  self.userRank = nil;
  self.mutableAnteInfosList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.userName = @"";
    self.userRank = @"";
  }
  return self;
}
static RoomUserInfo* defaultRoomUserInfoInstance = nil;
+ (void) initialize {
  if (self == [RoomUserInfo class]) {
    defaultRoomUserInfoInstance = [[RoomUserInfo alloc] init];
  }
}
+ (RoomUserInfo*) defaultInstance {
  return defaultRoomUserInfoInstance;
}
- (RoomUserInfo*) defaultInstance {
  return defaultRoomUserInfoInstance;
}
- (NSArray*) anteInfosList {
  return mutableAnteInfosList;
}
- (AnteInfo*) anteInfosAtIndex:(int32_t) index {
  id value = [mutableAnteInfosList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasUserName) {
    return NO;
  }
  if (!self.hasUserRank) {
    return NO;
  }
  for (AnteInfo* element in self.anteInfosList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeInt32:1 value:self.userId];
  }
  if (self.hasUserName) {
    [output writeString:2 value:self.userName];
  }
  if (self.hasUserRank) {
    [output writeString:3 value:self.userRank];
  }
  for (AnteInfo* element in self.anteInfosList) {
    [output writeMessage:4 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserId) {
    size += computeInt32Size(1, self.userId);
  }
  if (self.hasUserName) {
    size += computeStringSize(2, self.userName);
  }
  if (self.hasUserRank) {
    size += computeStringSize(3, self.userRank);
  }
  for (AnteInfo* element in self.anteInfosList) {
    size += computeMessageSize(4, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (RoomUserInfo*) parseFromData:(NSData*) data {
  return (RoomUserInfo*)[[[RoomUserInfo builder] mergeFromData:data] build];
}
+ (RoomUserInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomUserInfo*)[[[RoomUserInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RoomUserInfo*) parseFromInputStream:(NSInputStream*) input {
  return (RoomUserInfo*)[[[RoomUserInfo builder] mergeFromInputStream:input] build];
}
+ (RoomUserInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomUserInfo*)[[[RoomUserInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RoomUserInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RoomUserInfo*)[[[RoomUserInfo builder] mergeFromCodedInputStream:input] build];
}
+ (RoomUserInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomUserInfo*)[[[RoomUserInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RoomUserInfo_Builder*) builder {
  return [[[RoomUserInfo_Builder alloc] init] autorelease];
}
+ (RoomUserInfo_Builder*) builderWithPrototype:(RoomUserInfo*) prototype {
  return [[RoomUserInfo builder] mergeFrom:prototype];
}
- (RoomUserInfo_Builder*) builder {
  return [RoomUserInfo builder];
}
@end

@interface RoomUserInfo_Builder()
@property (retain) RoomUserInfo* result;
@end

@implementation RoomUserInfo_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[RoomUserInfo alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (RoomUserInfo_Builder*) clear {
  self.result = [[[RoomUserInfo alloc] init] autorelease];
  return self;
}
- (RoomUserInfo_Builder*) clone {
  return [RoomUserInfo builderWithPrototype:result];
}
- (RoomUserInfo*) defaultInstance {
  return [RoomUserInfo defaultInstance];
}
- (RoomUserInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RoomUserInfo*) buildPartial {
  RoomUserInfo* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (RoomUserInfo_Builder*) mergeFrom:(RoomUserInfo*) other {
  if (other == [RoomUserInfo defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasUserName) {
    [self setUserName:other.userName];
  }
  if (other.hasUserRank) {
    [self setUserRank:other.userRank];
  }
  if (other.mutableAnteInfosList.count > 0) {
    if (result.mutableAnteInfosList == nil) {
      result.mutableAnteInfosList = [NSMutableArray array];
    }
    [result.mutableAnteInfosList addObjectsFromArray:other.mutableAnteInfosList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RoomUserInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RoomUserInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readInt32]];
        break;
      }
      case 18: {
        [self setUserName:[input readString]];
        break;
      }
      case 26: {
        [self setUserRank:[input readString]];
        break;
      }
      case 34: {
        AnteInfo_Builder* subBuilder = [AnteInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAnteInfos:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (int32_t) userId {
  return result.userId;
}
- (RoomUserInfo_Builder*) setUserId:(int32_t) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (RoomUserInfo_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = 0;
  return self;
}
- (BOOL) hasUserName {
  return result.hasUserName;
}
- (NSString*) userName {
  return result.userName;
}
- (RoomUserInfo_Builder*) setUserName:(NSString*) value {
  result.hasUserName = YES;
  result.userName = value;
  return self;
}
- (RoomUserInfo_Builder*) clearUserName {
  result.hasUserName = NO;
  result.userName = @"";
  return self;
}
- (BOOL) hasUserRank {
  return result.hasUserRank;
}
- (NSString*) userRank {
  return result.userRank;
}
- (RoomUserInfo_Builder*) setUserRank:(NSString*) value {
  result.hasUserRank = YES;
  result.userRank = value;
  return self;
}
- (RoomUserInfo_Builder*) clearUserRank {
  result.hasUserRank = NO;
  result.userRank = @"";
  return self;
}
- (NSArray*) anteInfosList {
  if (result.mutableAnteInfosList == nil) { return [NSArray array]; }
  return result.mutableAnteInfosList;
}
- (AnteInfo*) anteInfosAtIndex:(int32_t) index {
  return [result anteInfosAtIndex:index];
}
- (RoomUserInfo_Builder*) replaceAnteInfosAtIndex:(int32_t) index with:(AnteInfo*) value {
  [result.mutableAnteInfosList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (RoomUserInfo_Builder*) addAllAnteInfos:(NSArray*) values {
  if (result.mutableAnteInfosList == nil) {
    result.mutableAnteInfosList = [NSMutableArray array];
  }
  [result.mutableAnteInfosList addObjectsFromArray:values];
  return self;
}
- (RoomUserInfo_Builder*) clearAnteInfosList {
  result.mutableAnteInfosList = nil;
  return self;
}
- (RoomUserInfo_Builder*) addAnteInfos:(AnteInfo*) value {
  if (result.mutableAnteInfosList == nil) {
    result.mutableAnteInfosList = [NSMutableArray array];
  }
  [result.mutableAnteInfosList addObject:value];
  return self;
}
@end

@interface RoomAnteRes ()
@property (retain) NSMutableArray* mutableRoomUserInfosList;
@end

@implementation RoomAnteRes

@synthesize mutableRoomUserInfosList;
- (void) dealloc {
  self.mutableRoomUserInfosList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static RoomAnteRes* defaultRoomAnteResInstance = nil;
+ (void) initialize {
  if (self == [RoomAnteRes class]) {
    defaultRoomAnteResInstance = [[RoomAnteRes alloc] init];
  }
}
+ (RoomAnteRes*) defaultInstance {
  return defaultRoomAnteResInstance;
}
- (RoomAnteRes*) defaultInstance {
  return defaultRoomAnteResInstance;
}
- (NSArray*) roomUserInfosList {
  return mutableRoomUserInfosList;
}
- (RoomUserInfo*) roomUserInfosAtIndex:(int32_t) index {
  id value = [mutableRoomUserInfosList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (RoomUserInfo* element in self.roomUserInfosList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (RoomUserInfo* element in self.roomUserInfosList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (RoomUserInfo* element in self.roomUserInfosList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (RoomAnteRes*) parseFromData:(NSData*) data {
  return (RoomAnteRes*)[[[RoomAnteRes builder] mergeFromData:data] build];
}
+ (RoomAnteRes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomAnteRes*)[[[RoomAnteRes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RoomAnteRes*) parseFromInputStream:(NSInputStream*) input {
  return (RoomAnteRes*)[[[RoomAnteRes builder] mergeFromInputStream:input] build];
}
+ (RoomAnteRes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomAnteRes*)[[[RoomAnteRes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RoomAnteRes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RoomAnteRes*)[[[RoomAnteRes builder] mergeFromCodedInputStream:input] build];
}
+ (RoomAnteRes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomAnteRes*)[[[RoomAnteRes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RoomAnteRes_Builder*) builder {
  return [[[RoomAnteRes_Builder alloc] init] autorelease];
}
+ (RoomAnteRes_Builder*) builderWithPrototype:(RoomAnteRes*) prototype {
  return [[RoomAnteRes builder] mergeFrom:prototype];
}
- (RoomAnteRes_Builder*) builder {
  return [RoomAnteRes builder];
}
@end

@interface RoomAnteRes_Builder()
@property (retain) RoomAnteRes* result;
@end

@implementation RoomAnteRes_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[RoomAnteRes alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (RoomAnteRes_Builder*) clear {
  self.result = [[[RoomAnteRes alloc] init] autorelease];
  return self;
}
- (RoomAnteRes_Builder*) clone {
  return [RoomAnteRes builderWithPrototype:result];
}
- (RoomAnteRes*) defaultInstance {
  return [RoomAnteRes defaultInstance];
}
- (RoomAnteRes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RoomAnteRes*) buildPartial {
  RoomAnteRes* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (RoomAnteRes_Builder*) mergeFrom:(RoomAnteRes*) other {
  if (other == [RoomAnteRes defaultInstance]) {
    return self;
  }
  if (other.mutableRoomUserInfosList.count > 0) {
    if (result.mutableRoomUserInfosList == nil) {
      result.mutableRoomUserInfosList = [NSMutableArray array];
    }
    [result.mutableRoomUserInfosList addObjectsFromArray:other.mutableRoomUserInfosList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RoomAnteRes_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RoomAnteRes_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        RoomUserInfo_Builder* subBuilder = [RoomUserInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRoomUserInfos:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) roomUserInfosList {
  if (result.mutableRoomUserInfosList == nil) { return [NSArray array]; }
  return result.mutableRoomUserInfosList;
}
- (RoomUserInfo*) roomUserInfosAtIndex:(int32_t) index {
  return [result roomUserInfosAtIndex:index];
}
- (RoomAnteRes_Builder*) replaceRoomUserInfosAtIndex:(int32_t) index with:(RoomUserInfo*) value {
  [result.mutableRoomUserInfosList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (RoomAnteRes_Builder*) addAllRoomUserInfos:(NSArray*) values {
  if (result.mutableRoomUserInfosList == nil) {
    result.mutableRoomUserInfosList = [NSMutableArray array];
  }
  [result.mutableRoomUserInfosList addObjectsFromArray:values];
  return self;
}
- (RoomAnteRes_Builder*) clearRoomUserInfosList {
  result.mutableRoomUserInfosList = nil;
  return self;
}
- (RoomAnteRes_Builder*) addRoomUserInfos:(RoomUserInfo*) value {
  if (result.mutableRoomUserInfosList == nil) {
    result.mutableRoomUserInfosList = [NSMutableArray array];
  }
  [result.mutableRoomUserInfosList addObject:value];
  return self;
}
@end

@interface RoomTipRes ()
@property (retain) NSString* tip;
@end

@implementation RoomTipRes

- (BOOL) hasTip {
  return !!hasTip_;
}
- (void) setHasTip:(BOOL) value {
  hasTip_ = !!value;
}
@synthesize tip;
- (void) dealloc {
  self.tip = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.tip = @"";
  }
  return self;
}
static RoomTipRes* defaultRoomTipResInstance = nil;
+ (void) initialize {
  if (self == [RoomTipRes class]) {
    defaultRoomTipResInstance = [[RoomTipRes alloc] init];
  }
}
+ (RoomTipRes*) defaultInstance {
  return defaultRoomTipResInstance;
}
- (RoomTipRes*) defaultInstance {
  return defaultRoomTipResInstance;
}
- (BOOL) isInitialized {
  if (!self.hasTip) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTip) {
    [output writeString:1 value:self.tip];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasTip) {
    size += computeStringSize(1, self.tip);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (RoomTipRes*) parseFromData:(NSData*) data {
  return (RoomTipRes*)[[[RoomTipRes builder] mergeFromData:data] build];
}
+ (RoomTipRes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomTipRes*)[[[RoomTipRes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RoomTipRes*) parseFromInputStream:(NSInputStream*) input {
  return (RoomTipRes*)[[[RoomTipRes builder] mergeFromInputStream:input] build];
}
+ (RoomTipRes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomTipRes*)[[[RoomTipRes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RoomTipRes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RoomTipRes*)[[[RoomTipRes builder] mergeFromCodedInputStream:input] build];
}
+ (RoomTipRes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomTipRes*)[[[RoomTipRes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RoomTipRes_Builder*) builder {
  return [[[RoomTipRes_Builder alloc] init] autorelease];
}
+ (RoomTipRes_Builder*) builderWithPrototype:(RoomTipRes*) prototype {
  return [[RoomTipRes builder] mergeFrom:prototype];
}
- (RoomTipRes_Builder*) builder {
  return [RoomTipRes builder];
}
@end

@interface RoomTipRes_Builder()
@property (retain) RoomTipRes* result;
@end

@implementation RoomTipRes_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[RoomTipRes alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (RoomTipRes_Builder*) clear {
  self.result = [[[RoomTipRes alloc] init] autorelease];
  return self;
}
- (RoomTipRes_Builder*) clone {
  return [RoomTipRes builderWithPrototype:result];
}
- (RoomTipRes*) defaultInstance {
  return [RoomTipRes defaultInstance];
}
- (RoomTipRes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RoomTipRes*) buildPartial {
  RoomTipRes* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (RoomTipRes_Builder*) mergeFrom:(RoomTipRes*) other {
  if (other == [RoomTipRes defaultInstance]) {
    return self;
  }
  if (other.hasTip) {
    [self setTip:other.tip];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RoomTipRes_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RoomTipRes_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setTip:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasTip {
  return result.hasTip;
}
- (NSString*) tip {
  return result.tip;
}
- (RoomTipRes_Builder*) setTip:(NSString*) value {
  result.hasTip = YES;
  result.tip = value;
  return self;
}
- (RoomTipRes_Builder*) clearTip {
  result.hasTip = NO;
  result.tip = @"";
  return self;
}
@end

@interface EnterRoomPushRes ()
@property int32_t userId;
@property (retain) NSString* userName;
@property int32_t rank;
@property int64_t experience;
@property int64_t nextExperience;
@property int64_t coin;
@property int32_t lottery;
@property (retain) NSString* photoUrl;
@property int32_t vip;
@end

@implementation EnterRoomPushRes

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
- (BOOL) hasUserName {
  return !!hasUserName_;
}
- (void) setHasUserName:(BOOL) value {
  hasUserName_ = !!value;
}
@synthesize userName;
- (BOOL) hasRank {
  return !!hasRank_;
}
- (void) setHasRank:(BOOL) value {
  hasRank_ = !!value;
}
@synthesize rank;
- (BOOL) hasExperience {
  return !!hasExperience_;
}
- (void) setHasExperience:(BOOL) value {
  hasExperience_ = !!value;
}
@synthesize experience;
- (BOOL) hasNextExperience {
  return !!hasNextExperience_;
}
- (void) setHasNextExperience:(BOOL) value {
  hasNextExperience_ = !!value;
}
@synthesize nextExperience;
- (BOOL) hasCoin {
  return !!hasCoin_;
}
- (void) setHasCoin:(BOOL) value {
  hasCoin_ = !!value;
}
@synthesize coin;
- (BOOL) hasLottery {
  return !!hasLottery_;
}
- (void) setHasLottery:(BOOL) value {
  hasLottery_ = !!value;
}
@synthesize lottery;
- (BOOL) hasPhotoUrl {
  return !!hasPhotoUrl_;
}
- (void) setHasPhotoUrl:(BOOL) value {
  hasPhotoUrl_ = !!value;
}
@synthesize photoUrl;
- (BOOL) hasVip {
  return !!hasVip_;
}
- (void) setHasVip:(BOOL) value {
  hasVip_ = !!value;
}
@synthesize vip;
- (void) dealloc {
  self.userName = nil;
  self.photoUrl = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.userName = @"";
    self.rank = 0;
    self.experience = 0L;
    self.nextExperience = 0L;
    self.coin = 0L;
    self.lottery = 0;
    self.photoUrl = @"";
    self.vip = 0;
  }
  return self;
}
static EnterRoomPushRes* defaultEnterRoomPushResInstance = nil;
+ (void) initialize {
  if (self == [EnterRoomPushRes class]) {
    defaultEnterRoomPushResInstance = [[EnterRoomPushRes alloc] init];
  }
}
+ (EnterRoomPushRes*) defaultInstance {
  return defaultEnterRoomPushResInstance;
}
- (EnterRoomPushRes*) defaultInstance {
  return defaultEnterRoomPushResInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasUserName) {
    return NO;
  }
  if (!self.hasRank) {
    return NO;
  }
  if (!self.hasExperience) {
    return NO;
  }
  if (!self.hasNextExperience) {
    return NO;
  }
  if (!self.hasCoin) {
    return NO;
  }
  if (!self.hasLottery) {
    return NO;
  }
  if (!self.hasPhotoUrl) {
    return NO;
  }
  if (!self.hasVip) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeInt32:1 value:self.userId];
  }
  if (self.hasUserName) {
    [output writeString:2 value:self.userName];
  }
  if (self.hasRank) {
    [output writeInt32:3 value:self.rank];
  }
  if (self.hasExperience) {
    [output writeInt64:4 value:self.experience];
  }
  if (self.hasNextExperience) {
    [output writeInt64:5 value:self.nextExperience];
  }
  if (self.hasCoin) {
    [output writeInt64:6 value:self.coin];
  }
  if (self.hasLottery) {
    [output writeInt32:7 value:self.lottery];
  }
  if (self.hasPhotoUrl) {
    [output writeString:8 value:self.photoUrl];
  }
  if (self.hasVip) {
    [output writeInt32:9 value:self.vip];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserId) {
    size += computeInt32Size(1, self.userId);
  }
  if (self.hasUserName) {
    size += computeStringSize(2, self.userName);
  }
  if (self.hasRank) {
    size += computeInt32Size(3, self.rank);
  }
  if (self.hasExperience) {
    size += computeInt64Size(4, self.experience);
  }
  if (self.hasNextExperience) {
    size += computeInt64Size(5, self.nextExperience);
  }
  if (self.hasCoin) {
    size += computeInt64Size(6, self.coin);
  }
  if (self.hasLottery) {
    size += computeInt32Size(7, self.lottery);
  }
  if (self.hasPhotoUrl) {
    size += computeStringSize(8, self.photoUrl);
  }
  if (self.hasVip) {
    size += computeInt32Size(9, self.vip);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (EnterRoomPushRes*) parseFromData:(NSData*) data {
  return (EnterRoomPushRes*)[[[EnterRoomPushRes builder] mergeFromData:data] build];
}
+ (EnterRoomPushRes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (EnterRoomPushRes*)[[[EnterRoomPushRes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (EnterRoomPushRes*) parseFromInputStream:(NSInputStream*) input {
  return (EnterRoomPushRes*)[[[EnterRoomPushRes builder] mergeFromInputStream:input] build];
}
+ (EnterRoomPushRes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (EnterRoomPushRes*)[[[EnterRoomPushRes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (EnterRoomPushRes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (EnterRoomPushRes*)[[[EnterRoomPushRes builder] mergeFromCodedInputStream:input] build];
}
+ (EnterRoomPushRes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (EnterRoomPushRes*)[[[EnterRoomPushRes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (EnterRoomPushRes_Builder*) builder {
  return [[[EnterRoomPushRes_Builder alloc] init] autorelease];
}
+ (EnterRoomPushRes_Builder*) builderWithPrototype:(EnterRoomPushRes*) prototype {
  return [[EnterRoomPushRes builder] mergeFrom:prototype];
}
- (EnterRoomPushRes_Builder*) builder {
  return [EnterRoomPushRes builder];
}
@end

@interface EnterRoomPushRes_Builder()
@property (retain) EnterRoomPushRes* result;
@end

@implementation EnterRoomPushRes_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[EnterRoomPushRes alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (EnterRoomPushRes_Builder*) clear {
  self.result = [[[EnterRoomPushRes alloc] init] autorelease];
  return self;
}
- (EnterRoomPushRes_Builder*) clone {
  return [EnterRoomPushRes builderWithPrototype:result];
}
- (EnterRoomPushRes*) defaultInstance {
  return [EnterRoomPushRes defaultInstance];
}
- (EnterRoomPushRes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (EnterRoomPushRes*) buildPartial {
  EnterRoomPushRes* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (EnterRoomPushRes_Builder*) mergeFrom:(EnterRoomPushRes*) other {
  if (other == [EnterRoomPushRes defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasUserName) {
    [self setUserName:other.userName];
  }
  if (other.hasRank) {
    [self setRank:other.rank];
  }
  if (other.hasExperience) {
    [self setExperience:other.experience];
  }
  if (other.hasNextExperience) {
    [self setNextExperience:other.nextExperience];
  }
  if (other.hasCoin) {
    [self setCoin:other.coin];
  }
  if (other.hasLottery) {
    [self setLottery:other.lottery];
  }
  if (other.hasPhotoUrl) {
    [self setPhotoUrl:other.photoUrl];
  }
  if (other.hasVip) {
    [self setVip:other.vip];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (EnterRoomPushRes_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (EnterRoomPushRes_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readInt32]];
        break;
      }
      case 18: {
        [self setUserName:[input readString]];
        break;
      }
      case 24: {
        [self setRank:[input readInt32]];
        break;
      }
      case 32: {
        [self setExperience:[input readInt64]];
        break;
      }
      case 40: {
        [self setNextExperience:[input readInt64]];
        break;
      }
      case 48: {
        [self setCoin:[input readInt64]];
        break;
      }
      case 56: {
        [self setLottery:[input readInt32]];
        break;
      }
      case 66: {
        [self setPhotoUrl:[input readString]];
        break;
      }
      case 72: {
        [self setVip:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (int32_t) userId {
  return result.userId;
}
- (EnterRoomPushRes_Builder*) setUserId:(int32_t) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (EnterRoomPushRes_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = 0;
  return self;
}
- (BOOL) hasUserName {
  return result.hasUserName;
}
- (NSString*) userName {
  return result.userName;
}
- (EnterRoomPushRes_Builder*) setUserName:(NSString*) value {
  result.hasUserName = YES;
  result.userName = value;
  return self;
}
- (EnterRoomPushRes_Builder*) clearUserName {
  result.hasUserName = NO;
  result.userName = @"";
  return self;
}
- (BOOL) hasRank {
  return result.hasRank;
}
- (int32_t) rank {
  return result.rank;
}
- (EnterRoomPushRes_Builder*) setRank:(int32_t) value {
  result.hasRank = YES;
  result.rank = value;
  return self;
}
- (EnterRoomPushRes_Builder*) clearRank {
  result.hasRank = NO;
  result.rank = 0;
  return self;
}
- (BOOL) hasExperience {
  return result.hasExperience;
}
- (int64_t) experience {
  return result.experience;
}
- (EnterRoomPushRes_Builder*) setExperience:(int64_t) value {
  result.hasExperience = YES;
  result.experience = value;
  return self;
}
- (EnterRoomPushRes_Builder*) clearExperience {
  result.hasExperience = NO;
  result.experience = 0L;
  return self;
}
- (BOOL) hasNextExperience {
  return result.hasNextExperience;
}
- (int64_t) nextExperience {
  return result.nextExperience;
}
- (EnterRoomPushRes_Builder*) setNextExperience:(int64_t) value {
  result.hasNextExperience = YES;
  result.nextExperience = value;
  return self;
}
- (EnterRoomPushRes_Builder*) clearNextExperience {
  result.hasNextExperience = NO;
  result.nextExperience = 0L;
  return self;
}
- (BOOL) hasCoin {
  return result.hasCoin;
}
- (int64_t) coin {
  return result.coin;
}
- (EnterRoomPushRes_Builder*) setCoin:(int64_t) value {
  result.hasCoin = YES;
  result.coin = value;
  return self;
}
- (EnterRoomPushRes_Builder*) clearCoin {
  result.hasCoin = NO;
  result.coin = 0L;
  return self;
}
- (BOOL) hasLottery {
  return result.hasLottery;
}
- (int32_t) lottery {
  return result.lottery;
}
- (EnterRoomPushRes_Builder*) setLottery:(int32_t) value {
  result.hasLottery = YES;
  result.lottery = value;
  return self;
}
- (EnterRoomPushRes_Builder*) clearLottery {
  result.hasLottery = NO;
  result.lottery = 0;
  return self;
}
- (BOOL) hasPhotoUrl {
  return result.hasPhotoUrl;
}
- (NSString*) photoUrl {
  return result.photoUrl;
}
- (EnterRoomPushRes_Builder*) setPhotoUrl:(NSString*) value {
  result.hasPhotoUrl = YES;
  result.photoUrl = value;
  return self;
}
- (EnterRoomPushRes_Builder*) clearPhotoUrl {
  result.hasPhotoUrl = NO;
  result.photoUrl = @"";
  return self;
}
- (BOOL) hasVip {
  return result.hasVip;
}
- (int32_t) vip {
  return result.vip;
}
- (EnterRoomPushRes_Builder*) setVip:(int32_t) value {
  result.hasVip = YES;
  result.vip = value;
  return self;
}
- (EnterRoomPushRes_Builder*) clearVip {
  result.hasVip = NO;
  result.vip = 0;
  return self;
}
@end

@interface RoomExitRes ()
@property int32_t userId;
@end

@implementation RoomExitRes

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userId = 0;
  }
  return self;
}
static RoomExitRes* defaultRoomExitResInstance = nil;
+ (void) initialize {
  if (self == [RoomExitRes class]) {
    defaultRoomExitResInstance = [[RoomExitRes alloc] init];
  }
}
+ (RoomExitRes*) defaultInstance {
  return defaultRoomExitResInstance;
}
- (RoomExitRes*) defaultInstance {
  return defaultRoomExitResInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeInt32:1 value:self.userId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserId) {
    size += computeInt32Size(1, self.userId);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (RoomExitRes*) parseFromData:(NSData*) data {
  return (RoomExitRes*)[[[RoomExitRes builder] mergeFromData:data] build];
}
+ (RoomExitRes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomExitRes*)[[[RoomExitRes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RoomExitRes*) parseFromInputStream:(NSInputStream*) input {
  return (RoomExitRes*)[[[RoomExitRes builder] mergeFromInputStream:input] build];
}
+ (RoomExitRes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomExitRes*)[[[RoomExitRes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RoomExitRes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RoomExitRes*)[[[RoomExitRes builder] mergeFromCodedInputStream:input] build];
}
+ (RoomExitRes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomExitRes*)[[[RoomExitRes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RoomExitRes_Builder*) builder {
  return [[[RoomExitRes_Builder alloc] init] autorelease];
}
+ (RoomExitRes_Builder*) builderWithPrototype:(RoomExitRes*) prototype {
  return [[RoomExitRes builder] mergeFrom:prototype];
}
- (RoomExitRes_Builder*) builder {
  return [RoomExitRes builder];
}
@end

@interface RoomExitRes_Builder()
@property (retain) RoomExitRes* result;
@end

@implementation RoomExitRes_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[RoomExitRes alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (RoomExitRes_Builder*) clear {
  self.result = [[[RoomExitRes alloc] init] autorelease];
  return self;
}
- (RoomExitRes_Builder*) clone {
  return [RoomExitRes builderWithPrototype:result];
}
- (RoomExitRes*) defaultInstance {
  return [RoomExitRes defaultInstance];
}
- (RoomExitRes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RoomExitRes*) buildPartial {
  RoomExitRes* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (RoomExitRes_Builder*) mergeFrom:(RoomExitRes*) other {
  if (other == [RoomExitRes defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RoomExitRes_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RoomExitRes_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (int32_t) userId {
  return result.userId;
}
- (RoomExitRes_Builder*) setUserId:(int32_t) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (RoomExitRes_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = 0;
  return self;
}
@end

