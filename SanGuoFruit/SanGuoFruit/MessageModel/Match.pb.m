// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Match.pb.h"

@implementation MatchRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [MatchRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface AnteRatio ()
@property int32_t point;
@property int32_t ratio;
@end

@implementation AnteRatio

- (BOOL) hasPoint {
  return !!hasPoint_;
}
- (void) setHasPoint:(BOOL) value {
  hasPoint_ = !!value;
}
@synthesize point;
- (BOOL) hasRatio {
  return !!hasRatio_;
}
- (void) setHasRatio:(BOOL) value {
  hasRatio_ = !!value;
}
@synthesize ratio;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.point = 0;
    self.ratio = 0;
  }
  return self;
}
static AnteRatio* defaultAnteRatioInstance = nil;
+ (void) initialize {
  if (self == [AnteRatio class]) {
    defaultAnteRatioInstance = [[AnteRatio alloc] init];
  }
}
+ (AnteRatio*) defaultInstance {
  return defaultAnteRatioInstance;
}
- (AnteRatio*) defaultInstance {
  return defaultAnteRatioInstance;
}
- (BOOL) isInitialized {
  if (!self.hasPoint) {
    return NO;
  }
  if (!self.hasRatio) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPoint) {
    [output writeInt32:1 value:self.point];
  }
  if (self.hasRatio) {
    [output writeInt32:2 value:self.ratio];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasPoint) {
    size += computeInt32Size(1, self.point);
  }
  if (self.hasRatio) {
    size += computeInt32Size(2, self.ratio);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (AnteRatio*) parseFromData:(NSData*) data {
  return (AnteRatio*)[[[AnteRatio builder] mergeFromData:data] build];
}
+ (AnteRatio*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AnteRatio*)[[[AnteRatio builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AnteRatio*) parseFromInputStream:(NSInputStream*) input {
  return (AnteRatio*)[[[AnteRatio builder] mergeFromInputStream:input] build];
}
+ (AnteRatio*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AnteRatio*)[[[AnteRatio builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AnteRatio*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AnteRatio*)[[[AnteRatio builder] mergeFromCodedInputStream:input] build];
}
+ (AnteRatio*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AnteRatio*)[[[AnteRatio builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AnteRatio_Builder*) builder {
  return [[[AnteRatio_Builder alloc] init] autorelease];
}
+ (AnteRatio_Builder*) builderWithPrototype:(AnteRatio*) prototype {
  return [[AnteRatio builder] mergeFrom:prototype];
}
- (AnteRatio_Builder*) builder {
  return [AnteRatio builder];
}
@end

@interface AnteRatio_Builder()
@property (retain) AnteRatio* result;
@end

@implementation AnteRatio_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[AnteRatio alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (AnteRatio_Builder*) clear {
  self.result = [[[AnteRatio alloc] init] autorelease];
  return self;
}
- (AnteRatio_Builder*) clone {
  return [AnteRatio builderWithPrototype:result];
}
- (AnteRatio*) defaultInstance {
  return [AnteRatio defaultInstance];
}
- (AnteRatio*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AnteRatio*) buildPartial {
  AnteRatio* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (AnteRatio_Builder*) mergeFrom:(AnteRatio*) other {
  if (other == [AnteRatio defaultInstance]) {
    return self;
  }
  if (other.hasPoint) {
    [self setPoint:other.point];
  }
  if (other.hasRatio) {
    [self setRatio:other.ratio];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AnteRatio_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AnteRatio_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPoint:[input readInt32]];
        break;
      }
      case 16: {
        [self setRatio:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasPoint {
  return result.hasPoint;
}
- (int32_t) point {
  return result.point;
}
- (AnteRatio_Builder*) setPoint:(int32_t) value {
  result.hasPoint = YES;
  result.point = value;
  return self;
}
- (AnteRatio_Builder*) clearPoint {
  result.hasPoint = NO;
  result.point = 0;
  return self;
}
- (BOOL) hasRatio {
  return result.hasRatio;
}
- (int32_t) ratio {
  return result.ratio;
}
- (AnteRatio_Builder*) setRatio:(int32_t) value {
  result.hasRatio = YES;
  result.ratio = value;
  return self;
}
- (AnteRatio_Builder*) clearRatio {
  result.hasRatio = NO;
  result.ratio = 0;
  return self;
}
@end

@interface MatchListRes ()
@property int32_t times;
@property (retain) NSMutableArray* mutableAnteRatioList;
@end

@implementation MatchListRes

- (BOOL) hasTimes {
  return !!hasTimes_;
}
- (void) setHasTimes:(BOOL) value {
  hasTimes_ = !!value;
}
@synthesize times;
@synthesize mutableAnteRatioList;
- (void) dealloc {
  self.mutableAnteRatioList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.times = 0;
  }
  return self;
}
static MatchListRes* defaultMatchListResInstance = nil;
+ (void) initialize {
  if (self == [MatchListRes class]) {
    defaultMatchListResInstance = [[MatchListRes alloc] init];
  }
}
+ (MatchListRes*) defaultInstance {
  return defaultMatchListResInstance;
}
- (MatchListRes*) defaultInstance {
  return defaultMatchListResInstance;
}
- (NSArray*) anteRatioList {
  return mutableAnteRatioList;
}
- (AnteRatio*) anteRatioAtIndex:(int32_t) index {
  id value = [mutableAnteRatioList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasTimes) {
    return NO;
  }
  for (AnteRatio* element in self.anteRatioList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTimes) {
    [output writeInt32:1 value:self.times];
  }
  for (AnteRatio* element in self.anteRatioList) {
    [output writeMessage:2 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasTimes) {
    size += computeInt32Size(1, self.times);
  }
  for (AnteRatio* element in self.anteRatioList) {
    size += computeMessageSize(2, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MatchListRes*) parseFromData:(NSData*) data {
  return (MatchListRes*)[[[MatchListRes builder] mergeFromData:data] build];
}
+ (MatchListRes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MatchListRes*)[[[MatchListRes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MatchListRes*) parseFromInputStream:(NSInputStream*) input {
  return (MatchListRes*)[[[MatchListRes builder] mergeFromInputStream:input] build];
}
+ (MatchListRes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MatchListRes*)[[[MatchListRes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MatchListRes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MatchListRes*)[[[MatchListRes builder] mergeFromCodedInputStream:input] build];
}
+ (MatchListRes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MatchListRes*)[[[MatchListRes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MatchListRes_Builder*) builder {
  return [[[MatchListRes_Builder alloc] init] autorelease];
}
+ (MatchListRes_Builder*) builderWithPrototype:(MatchListRes*) prototype {
  return [[MatchListRes builder] mergeFrom:prototype];
}
- (MatchListRes_Builder*) builder {
  return [MatchListRes builder];
}
@end

@interface MatchListRes_Builder()
@property (retain) MatchListRes* result;
@end

@implementation MatchListRes_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MatchListRes alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MatchListRes_Builder*) clear {
  self.result = [[[MatchListRes alloc] init] autorelease];
  return self;
}
- (MatchListRes_Builder*) clone {
  return [MatchListRes builderWithPrototype:result];
}
- (MatchListRes*) defaultInstance {
  return [MatchListRes defaultInstance];
}
- (MatchListRes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MatchListRes*) buildPartial {
  MatchListRes* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MatchListRes_Builder*) mergeFrom:(MatchListRes*) other {
  if (other == [MatchListRes defaultInstance]) {
    return self;
  }
  if (other.hasTimes) {
    [self setTimes:other.times];
  }
  if (other.mutableAnteRatioList.count > 0) {
    if (result.mutableAnteRatioList == nil) {
      result.mutableAnteRatioList = [NSMutableArray array];
    }
    [result.mutableAnteRatioList addObjectsFromArray:other.mutableAnteRatioList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MatchListRes_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MatchListRes_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTimes:[input readInt32]];
        break;
      }
      case 18: {
        AnteRatio_Builder* subBuilder = [AnteRatio builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAnteRatio:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasTimes {
  return result.hasTimes;
}
- (int32_t) times {
  return result.times;
}
- (MatchListRes_Builder*) setTimes:(int32_t) value {
  result.hasTimes = YES;
  result.times = value;
  return self;
}
- (MatchListRes_Builder*) clearTimes {
  result.hasTimes = NO;
  result.times = 0;
  return self;
}
- (NSArray*) anteRatioList {
  if (result.mutableAnteRatioList == nil) { return [NSArray array]; }
  return result.mutableAnteRatioList;
}
- (AnteRatio*) anteRatioAtIndex:(int32_t) index {
  return [result anteRatioAtIndex:index];
}
- (MatchListRes_Builder*) replaceAnteRatioAtIndex:(int32_t) index with:(AnteRatio*) value {
  [result.mutableAnteRatioList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (MatchListRes_Builder*) addAllAnteRatio:(NSArray*) values {
  if (result.mutableAnteRatioList == nil) {
    result.mutableAnteRatioList = [NSMutableArray array];
  }
  [result.mutableAnteRatioList addObjectsFromArray:values];
  return self;
}
- (MatchListRes_Builder*) clearAnteRatioList {
  result.mutableAnteRatioList = nil;
  return self;
}
- (MatchListRes_Builder*) addAnteRatio:(AnteRatio*) value {
  if (result.mutableAnteRatioList == nil) {
    result.mutableAnteRatioList = [NSMutableArray array];
  }
  [result.mutableAnteRatioList addObject:value];
  return self;
}
@end

@interface MatchAnteUpRes ()
@property int32_t roomId;
@property int32_t deskId;
@property (retain) NSMutableArray* mutableAnteRatioList;
@end

@implementation MatchAnteUpRes

- (BOOL) hasRoomId {
  return !!hasRoomId_;
}
- (void) setHasRoomId:(BOOL) value {
  hasRoomId_ = !!value;
}
@synthesize roomId;
- (BOOL) hasDeskId {
  return !!hasDeskId_;
}
- (void) setHasDeskId:(BOOL) value {
  hasDeskId_ = !!value;
}
@synthesize deskId;
@synthesize mutableAnteRatioList;
- (void) dealloc {
  self.mutableAnteRatioList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.roomId = 0;
    self.deskId = 0;
  }
  return self;
}
static MatchAnteUpRes* defaultMatchAnteUpResInstance = nil;
+ (void) initialize {
  if (self == [MatchAnteUpRes class]) {
    defaultMatchAnteUpResInstance = [[MatchAnteUpRes alloc] init];
  }
}
+ (MatchAnteUpRes*) defaultInstance {
  return defaultMatchAnteUpResInstance;
}
- (MatchAnteUpRes*) defaultInstance {
  return defaultMatchAnteUpResInstance;
}
- (NSArray*) anteRatioList {
  return mutableAnteRatioList;
}
- (AnteRatio*) anteRatioAtIndex:(int32_t) index {
  id value = [mutableAnteRatioList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasRoomId) {
    return NO;
  }
  if (!self.hasDeskId) {
    return NO;
  }
  for (AnteRatio* element in self.anteRatioList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRoomId) {
    [output writeInt32:1 value:self.roomId];
  }
  if (self.hasDeskId) {
    [output writeInt32:2 value:self.deskId];
  }
  for (AnteRatio* element in self.anteRatioList) {
    [output writeMessage:3 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasRoomId) {
    size += computeInt32Size(1, self.roomId);
  }
  if (self.hasDeskId) {
    size += computeInt32Size(2, self.deskId);
  }
  for (AnteRatio* element in self.anteRatioList) {
    size += computeMessageSize(3, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MatchAnteUpRes*) parseFromData:(NSData*) data {
  return (MatchAnteUpRes*)[[[MatchAnteUpRes builder] mergeFromData:data] build];
}
+ (MatchAnteUpRes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MatchAnteUpRes*)[[[MatchAnteUpRes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MatchAnteUpRes*) parseFromInputStream:(NSInputStream*) input {
  return (MatchAnteUpRes*)[[[MatchAnteUpRes builder] mergeFromInputStream:input] build];
}
+ (MatchAnteUpRes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MatchAnteUpRes*)[[[MatchAnteUpRes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MatchAnteUpRes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MatchAnteUpRes*)[[[MatchAnteUpRes builder] mergeFromCodedInputStream:input] build];
}
+ (MatchAnteUpRes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MatchAnteUpRes*)[[[MatchAnteUpRes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MatchAnteUpRes_Builder*) builder {
  return [[[MatchAnteUpRes_Builder alloc] init] autorelease];
}
+ (MatchAnteUpRes_Builder*) builderWithPrototype:(MatchAnteUpRes*) prototype {
  return [[MatchAnteUpRes builder] mergeFrom:prototype];
}
- (MatchAnteUpRes_Builder*) builder {
  return [MatchAnteUpRes builder];
}
@end

@interface MatchAnteUpRes_Builder()
@property (retain) MatchAnteUpRes* result;
@end

@implementation MatchAnteUpRes_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MatchAnteUpRes alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MatchAnteUpRes_Builder*) clear {
  self.result = [[[MatchAnteUpRes alloc] init] autorelease];
  return self;
}
- (MatchAnteUpRes_Builder*) clone {
  return [MatchAnteUpRes builderWithPrototype:result];
}
- (MatchAnteUpRes*) defaultInstance {
  return [MatchAnteUpRes defaultInstance];
}
- (MatchAnteUpRes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MatchAnteUpRes*) buildPartial {
  MatchAnteUpRes* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MatchAnteUpRes_Builder*) mergeFrom:(MatchAnteUpRes*) other {
  if (other == [MatchAnteUpRes defaultInstance]) {
    return self;
  }
  if (other.hasRoomId) {
    [self setRoomId:other.roomId];
  }
  if (other.hasDeskId) {
    [self setDeskId:other.deskId];
  }
  if (other.mutableAnteRatioList.count > 0) {
    if (result.mutableAnteRatioList == nil) {
      result.mutableAnteRatioList = [NSMutableArray array];
    }
    [result.mutableAnteRatioList addObjectsFromArray:other.mutableAnteRatioList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MatchAnteUpRes_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MatchAnteUpRes_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setRoomId:[input readInt32]];
        break;
      }
      case 16: {
        [self setDeskId:[input readInt32]];
        break;
      }
      case 26: {
        AnteRatio_Builder* subBuilder = [AnteRatio builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAnteRatio:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasRoomId {
  return result.hasRoomId;
}
- (int32_t) roomId {
  return result.roomId;
}
- (MatchAnteUpRes_Builder*) setRoomId:(int32_t) value {
  result.hasRoomId = YES;
  result.roomId = value;
  return self;
}
- (MatchAnteUpRes_Builder*) clearRoomId {
  result.hasRoomId = NO;
  result.roomId = 0;
  return self;
}
- (BOOL) hasDeskId {
  return result.hasDeskId;
}
- (int32_t) deskId {
  return result.deskId;
}
- (MatchAnteUpRes_Builder*) setDeskId:(int32_t) value {
  result.hasDeskId = YES;
  result.deskId = value;
  return self;
}
- (MatchAnteUpRes_Builder*) clearDeskId {
  result.hasDeskId = NO;
  result.deskId = 0;
  return self;
}
- (NSArray*) anteRatioList {
  if (result.mutableAnteRatioList == nil) { return [NSArray array]; }
  return result.mutableAnteRatioList;
}
- (AnteRatio*) anteRatioAtIndex:(int32_t) index {
  return [result anteRatioAtIndex:index];
}
- (MatchAnteUpRes_Builder*) replaceAnteRatioAtIndex:(int32_t) index with:(AnteRatio*) value {
  [result.mutableAnteRatioList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (MatchAnteUpRes_Builder*) addAllAnteRatio:(NSArray*) values {
  if (result.mutableAnteRatioList == nil) {
    result.mutableAnteRatioList = [NSMutableArray array];
  }
  [result.mutableAnteRatioList addObjectsFromArray:values];
  return self;
}
- (MatchAnteUpRes_Builder*) clearAnteRatioList {
  result.mutableAnteRatioList = nil;
  return self;
}
- (MatchAnteUpRes_Builder*) addAnteRatio:(AnteRatio*) value {
  if (result.mutableAnteRatioList == nil) {
    result.mutableAnteRatioList = [NSMutableArray array];
  }
  [result.mutableAnteRatioList addObject:value];
  return self;
}
@end

@interface UserAnteUpRes ()
@property int32_t userId;
@property (retain) NSMutableArray* mutableAnteRatioList;
@end

@implementation UserAnteUpRes

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
@synthesize mutableAnteRatioList;
- (void) dealloc {
  self.mutableAnteRatioList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userId = 0;
  }
  return self;
}
static UserAnteUpRes* defaultUserAnteUpResInstance = nil;
+ (void) initialize {
  if (self == [UserAnteUpRes class]) {
    defaultUserAnteUpResInstance = [[UserAnteUpRes alloc] init];
  }
}
+ (UserAnteUpRes*) defaultInstance {
  return defaultUserAnteUpResInstance;
}
- (UserAnteUpRes*) defaultInstance {
  return defaultUserAnteUpResInstance;
}
- (NSArray*) anteRatioList {
  return mutableAnteRatioList;
}
- (AnteRatio*) anteRatioAtIndex:(int32_t) index {
  id value = [mutableAnteRatioList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  for (AnteRatio* element in self.anteRatioList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeInt32:1 value:self.userId];
  }
  for (AnteRatio* element in self.anteRatioList) {
    [output writeMessage:2 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserId) {
    size += computeInt32Size(1, self.userId);
  }
  for (AnteRatio* element in self.anteRatioList) {
    size += computeMessageSize(2, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (UserAnteUpRes*) parseFromData:(NSData*) data {
  return (UserAnteUpRes*)[[[UserAnteUpRes builder] mergeFromData:data] build];
}
+ (UserAnteUpRes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserAnteUpRes*)[[[UserAnteUpRes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserAnteUpRes*) parseFromInputStream:(NSInputStream*) input {
  return (UserAnteUpRes*)[[[UserAnteUpRes builder] mergeFromInputStream:input] build];
}
+ (UserAnteUpRes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserAnteUpRes*)[[[UserAnteUpRes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserAnteUpRes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserAnteUpRes*)[[[UserAnteUpRes builder] mergeFromCodedInputStream:input] build];
}
+ (UserAnteUpRes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserAnteUpRes*)[[[UserAnteUpRes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserAnteUpRes_Builder*) builder {
  return [[[UserAnteUpRes_Builder alloc] init] autorelease];
}
+ (UserAnteUpRes_Builder*) builderWithPrototype:(UserAnteUpRes*) prototype {
  return [[UserAnteUpRes builder] mergeFrom:prototype];
}
- (UserAnteUpRes_Builder*) builder {
  return [UserAnteUpRes builder];
}
@end

@interface UserAnteUpRes_Builder()
@property (retain) UserAnteUpRes* result;
@end

@implementation UserAnteUpRes_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[UserAnteUpRes alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (UserAnteUpRes_Builder*) clear {
  self.result = [[[UserAnteUpRes alloc] init] autorelease];
  return self;
}
- (UserAnteUpRes_Builder*) clone {
  return [UserAnteUpRes builderWithPrototype:result];
}
- (UserAnteUpRes*) defaultInstance {
  return [UserAnteUpRes defaultInstance];
}
- (UserAnteUpRes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserAnteUpRes*) buildPartial {
  UserAnteUpRes* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (UserAnteUpRes_Builder*) mergeFrom:(UserAnteUpRes*) other {
  if (other == [UserAnteUpRes defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.mutableAnteRatioList.count > 0) {
    if (result.mutableAnteRatioList == nil) {
      result.mutableAnteRatioList = [NSMutableArray array];
    }
    [result.mutableAnteRatioList addObjectsFromArray:other.mutableAnteRatioList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserAnteUpRes_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserAnteUpRes_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readInt32]];
        break;
      }
      case 18: {
        AnteRatio_Builder* subBuilder = [AnteRatio builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAnteRatio:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (int32_t) userId {
  return result.userId;
}
- (UserAnteUpRes_Builder*) setUserId:(int32_t) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (UserAnteUpRes_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = 0;
  return self;
}
- (NSArray*) anteRatioList {
  if (result.mutableAnteRatioList == nil) { return [NSArray array]; }
  return result.mutableAnteRatioList;
}
- (AnteRatio*) anteRatioAtIndex:(int32_t) index {
  return [result anteRatioAtIndex:index];
}
- (UserAnteUpRes_Builder*) replaceAnteRatioAtIndex:(int32_t) index with:(AnteRatio*) value {
  [result.mutableAnteRatioList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (UserAnteUpRes_Builder*) addAllAnteRatio:(NSArray*) values {
  if (result.mutableAnteRatioList == nil) {
    result.mutableAnteRatioList = [NSMutableArray array];
  }
  [result.mutableAnteRatioList addObjectsFromArray:values];
  return self;
}
- (UserAnteUpRes_Builder*) clearAnteRatioList {
  result.mutableAnteRatioList = nil;
  return self;
}
- (UserAnteUpRes_Builder*) addAnteRatio:(AnteRatio*) value {
  if (result.mutableAnteRatioList == nil) {
    result.mutableAnteRatioList = [NSMutableArray array];
  }
  [result.mutableAnteRatioList addObject:value];
  return self;
}
@end

@interface AnteUpUserInfo ()
@property int32_t userId;
@property int32_t coin;
@property int32_t lottery;
@property int32_t continueWinCount;
@property int64_t experience;
@property int64_t nextExperience;
@property int32_t isUp;
@end

@implementation AnteUpUserInfo

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
- (BOOL) hasCoin {
  return !!hasCoin_;
}
- (void) setHasCoin:(BOOL) value {
  hasCoin_ = !!value;
}
@synthesize coin;
- (BOOL) hasLottery {
  return !!hasLottery_;
}
- (void) setHasLottery:(BOOL) value {
  hasLottery_ = !!value;
}
@synthesize lottery;
- (BOOL) hasContinueWinCount {
  return !!hasContinueWinCount_;
}
- (void) setHasContinueWinCount:(BOOL) value {
  hasContinueWinCount_ = !!value;
}
@synthesize continueWinCount;
- (BOOL) hasExperience {
  return !!hasExperience_;
}
- (void) setHasExperience:(BOOL) value {
  hasExperience_ = !!value;
}
@synthesize experience;
- (BOOL) hasNextExperience {
  return !!hasNextExperience_;
}
- (void) setHasNextExperience:(BOOL) value {
  hasNextExperience_ = !!value;
}
@synthesize nextExperience;
- (BOOL) hasIsUp {
  return !!hasIsUp_;
}
- (void) setHasIsUp:(BOOL) value {
  hasIsUp_ = !!value;
}
@synthesize isUp;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.coin = 0;
    self.lottery = 0;
    self.continueWinCount = 0;
    self.experience = 0L;
    self.nextExperience = 0L;
    self.isUp = 0;
  }
  return self;
}
static AnteUpUserInfo* defaultAnteUpUserInfoInstance = nil;
+ (void) initialize {
  if (self == [AnteUpUserInfo class]) {
    defaultAnteUpUserInfoInstance = [[AnteUpUserInfo alloc] init];
  }
}
+ (AnteUpUserInfo*) defaultInstance {
  return defaultAnteUpUserInfoInstance;
}
- (AnteUpUserInfo*) defaultInstance {
  return defaultAnteUpUserInfoInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasCoin) {
    return NO;
  }
  if (!self.hasLottery) {
    return NO;
  }
  if (!self.hasContinueWinCount) {
    return NO;
  }
  if (!self.hasExperience) {
    return NO;
  }
  if (!self.hasNextExperience) {
    return NO;
  }
  if (!self.hasIsUp) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeInt32:1 value:self.userId];
  }
  if (self.hasCoin) {
    [output writeInt32:2 value:self.coin];
  }
  if (self.hasLottery) {
    [output writeInt32:3 value:self.lottery];
  }
  if (self.hasContinueWinCount) {
    [output writeInt32:4 value:self.continueWinCount];
  }
  if (self.hasExperience) {
    [output writeInt64:5 value:self.experience];
  }
  if (self.hasNextExperience) {
    [output writeInt64:6 value:self.nextExperience];
  }
  if (self.hasIsUp) {
    [output writeInt32:7 value:self.isUp];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserId) {
    size += computeInt32Size(1, self.userId);
  }
  if (self.hasCoin) {
    size += computeInt32Size(2, self.coin);
  }
  if (self.hasLottery) {
    size += computeInt32Size(3, self.lottery);
  }
  if (self.hasContinueWinCount) {
    size += computeInt32Size(4, self.continueWinCount);
  }
  if (self.hasExperience) {
    size += computeInt64Size(5, self.experience);
  }
  if (self.hasNextExperience) {
    size += computeInt64Size(6, self.nextExperience);
  }
  if (self.hasIsUp) {
    size += computeInt32Size(7, self.isUp);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (AnteUpUserInfo*) parseFromData:(NSData*) data {
  return (AnteUpUserInfo*)[[[AnteUpUserInfo builder] mergeFromData:data] build];
}
+ (AnteUpUserInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AnteUpUserInfo*)[[[AnteUpUserInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AnteUpUserInfo*) parseFromInputStream:(NSInputStream*) input {
  return (AnteUpUserInfo*)[[[AnteUpUserInfo builder] mergeFromInputStream:input] build];
}
+ (AnteUpUserInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AnteUpUserInfo*)[[[AnteUpUserInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AnteUpUserInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AnteUpUserInfo*)[[[AnteUpUserInfo builder] mergeFromCodedInputStream:input] build];
}
+ (AnteUpUserInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AnteUpUserInfo*)[[[AnteUpUserInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AnteUpUserInfo_Builder*) builder {
  return [[[AnteUpUserInfo_Builder alloc] init] autorelease];
}
+ (AnteUpUserInfo_Builder*) builderWithPrototype:(AnteUpUserInfo*) prototype {
  return [[AnteUpUserInfo builder] mergeFrom:prototype];
}
- (AnteUpUserInfo_Builder*) builder {
  return [AnteUpUserInfo builder];
}
@end

@interface AnteUpUserInfo_Builder()
@property (retain) AnteUpUserInfo* result;
@end

@implementation AnteUpUserInfo_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[AnteUpUserInfo alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (AnteUpUserInfo_Builder*) clear {
  self.result = [[[AnteUpUserInfo alloc] init] autorelease];
  return self;
}
- (AnteUpUserInfo_Builder*) clone {
  return [AnteUpUserInfo builderWithPrototype:result];
}
- (AnteUpUserInfo*) defaultInstance {
  return [AnteUpUserInfo defaultInstance];
}
- (AnteUpUserInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AnteUpUserInfo*) buildPartial {
  AnteUpUserInfo* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (AnteUpUserInfo_Builder*) mergeFrom:(AnteUpUserInfo*) other {
  if (other == [AnteUpUserInfo defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasCoin) {
    [self setCoin:other.coin];
  }
  if (other.hasLottery) {
    [self setLottery:other.lottery];
  }
  if (other.hasContinueWinCount) {
    [self setContinueWinCount:other.continueWinCount];
  }
  if (other.hasExperience) {
    [self setExperience:other.experience];
  }
  if (other.hasNextExperience) {
    [self setNextExperience:other.nextExperience];
  }
  if (other.hasIsUp) {
    [self setIsUp:other.isUp];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AnteUpUserInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AnteUpUserInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readInt32]];
        break;
      }
      case 16: {
        [self setCoin:[input readInt32]];
        break;
      }
      case 24: {
        [self setLottery:[input readInt32]];
        break;
      }
      case 32: {
        [self setContinueWinCount:[input readInt32]];
        break;
      }
      case 40: {
        [self setExperience:[input readInt64]];
        break;
      }
      case 48: {
        [self setNextExperience:[input readInt64]];
        break;
      }
      case 56: {
        [self setIsUp:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (int32_t) userId {
  return result.userId;
}
- (AnteUpUserInfo_Builder*) setUserId:(int32_t) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (AnteUpUserInfo_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = 0;
  return self;
}
- (BOOL) hasCoin {
  return result.hasCoin;
}
- (int32_t) coin {
  return result.coin;
}
- (AnteUpUserInfo_Builder*) setCoin:(int32_t) value {
  result.hasCoin = YES;
  result.coin = value;
  return self;
}
- (AnteUpUserInfo_Builder*) clearCoin {
  result.hasCoin = NO;
  result.coin = 0;
  return self;
}
- (BOOL) hasLottery {
  return result.hasLottery;
}
- (int32_t) lottery {
  return result.lottery;
}
- (AnteUpUserInfo_Builder*) setLottery:(int32_t) value {
  result.hasLottery = YES;
  result.lottery = value;
  return self;
}
- (AnteUpUserInfo_Builder*) clearLottery {
  result.hasLottery = NO;
  result.lottery = 0;
  return self;
}
- (BOOL) hasContinueWinCount {
  return result.hasContinueWinCount;
}
- (int32_t) continueWinCount {
  return result.continueWinCount;
}
- (AnteUpUserInfo_Builder*) setContinueWinCount:(int32_t) value {
  result.hasContinueWinCount = YES;
  result.continueWinCount = value;
  return self;
}
- (AnteUpUserInfo_Builder*) clearContinueWinCount {
  result.hasContinueWinCount = NO;
  result.continueWinCount = 0;
  return self;
}
- (BOOL) hasExperience {
  return result.hasExperience;
}
- (int64_t) experience {
  return result.experience;
}
- (AnteUpUserInfo_Builder*) setExperience:(int64_t) value {
  result.hasExperience = YES;
  result.experience = value;
  return self;
}
- (AnteUpUserInfo_Builder*) clearExperience {
  result.hasExperience = NO;
  result.experience = 0L;
  return self;
}
- (BOOL) hasNextExperience {
  return result.hasNextExperience;
}
- (int64_t) nextExperience {
  return result.nextExperience;
}
- (AnteUpUserInfo_Builder*) setNextExperience:(int64_t) value {
  result.hasNextExperience = YES;
  result.nextExperience = value;
  return self;
}
- (AnteUpUserInfo_Builder*) clearNextExperience {
  result.hasNextExperience = NO;
  result.nextExperience = 0L;
  return self;
}
- (BOOL) hasIsUp {
  return result.hasIsUp;
}
- (int32_t) isUp {
  return result.isUp;
}
- (AnteUpUserInfo_Builder*) setIsUp:(int32_t) value {
  result.hasIsUp = YES;
  result.isUp = value;
  return self;
}
- (AnteUpUserInfo_Builder*) clearIsUp {
  result.hasIsUp = NO;
  result.isUp = 0;
  return self;
}
@end

@interface AnteUpResultRes ()
@property int32_t point;
@property (retain) NSMutableArray* mutableAnteUpUserInfosList;
@end

@implementation AnteUpResultRes

- (BOOL) hasPoint {
  return !!hasPoint_;
}
- (void) setHasPoint:(BOOL) value {
  hasPoint_ = !!value;
}
@synthesize point;
@synthesize mutableAnteUpUserInfosList;
- (void) dealloc {
  self.mutableAnteUpUserInfosList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.point = 0;
  }
  return self;
}
static AnteUpResultRes* defaultAnteUpResultResInstance = nil;
+ (void) initialize {
  if (self == [AnteUpResultRes class]) {
    defaultAnteUpResultResInstance = [[AnteUpResultRes alloc] init];
  }
}
+ (AnteUpResultRes*) defaultInstance {
  return defaultAnteUpResultResInstance;
}
- (AnteUpResultRes*) defaultInstance {
  return defaultAnteUpResultResInstance;
}
- (NSArray*) anteUpUserInfosList {
  return mutableAnteUpUserInfosList;
}
- (AnteUpUserInfo*) anteUpUserInfosAtIndex:(int32_t) index {
  id value = [mutableAnteUpUserInfosList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasPoint) {
    return NO;
  }
  for (AnteUpUserInfo* element in self.anteUpUserInfosList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPoint) {
    [output writeInt32:1 value:self.point];
  }
  for (AnteUpUserInfo* element in self.anteUpUserInfosList) {
    [output writeMessage:2 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasPoint) {
    size += computeInt32Size(1, self.point);
  }
  for (AnteUpUserInfo* element in self.anteUpUserInfosList) {
    size += computeMessageSize(2, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (AnteUpResultRes*) parseFromData:(NSData*) data {
  return (AnteUpResultRes*)[[[AnteUpResultRes builder] mergeFromData:data] build];
}
+ (AnteUpResultRes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AnteUpResultRes*)[[[AnteUpResultRes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AnteUpResultRes*) parseFromInputStream:(NSInputStream*) input {
  return (AnteUpResultRes*)[[[AnteUpResultRes builder] mergeFromInputStream:input] build];
}
+ (AnteUpResultRes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AnteUpResultRes*)[[[AnteUpResultRes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AnteUpResultRes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AnteUpResultRes*)[[[AnteUpResultRes builder] mergeFromCodedInputStream:input] build];
}
+ (AnteUpResultRes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AnteUpResultRes*)[[[AnteUpResultRes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AnteUpResultRes_Builder*) builder {
  return [[[AnteUpResultRes_Builder alloc] init] autorelease];
}
+ (AnteUpResultRes_Builder*) builderWithPrototype:(AnteUpResultRes*) prototype {
  return [[AnteUpResultRes builder] mergeFrom:prototype];
}
- (AnteUpResultRes_Builder*) builder {
  return [AnteUpResultRes builder];
}
@end

@interface AnteUpResultRes_Builder()
@property (retain) AnteUpResultRes* result;
@end

@implementation AnteUpResultRes_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[AnteUpResultRes alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (AnteUpResultRes_Builder*) clear {
  self.result = [[[AnteUpResultRes alloc] init] autorelease];
  return self;
}
- (AnteUpResultRes_Builder*) clone {
  return [AnteUpResultRes builderWithPrototype:result];
}
- (AnteUpResultRes*) defaultInstance {
  return [AnteUpResultRes defaultInstance];
}
- (AnteUpResultRes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AnteUpResultRes*) buildPartial {
  AnteUpResultRes* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (AnteUpResultRes_Builder*) mergeFrom:(AnteUpResultRes*) other {
  if (other == [AnteUpResultRes defaultInstance]) {
    return self;
  }
  if (other.hasPoint) {
    [self setPoint:other.point];
  }
  if (other.mutableAnteUpUserInfosList.count > 0) {
    if (result.mutableAnteUpUserInfosList == nil) {
      result.mutableAnteUpUserInfosList = [NSMutableArray array];
    }
    [result.mutableAnteUpUserInfosList addObjectsFromArray:other.mutableAnteUpUserInfosList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AnteUpResultRes_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AnteUpResultRes_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPoint:[input readInt32]];
        break;
      }
      case 18: {
        AnteUpUserInfo_Builder* subBuilder = [AnteUpUserInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAnteUpUserInfos:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasPoint {
  return result.hasPoint;
}
- (int32_t) point {
  return result.point;
}
- (AnteUpResultRes_Builder*) setPoint:(int32_t) value {
  result.hasPoint = YES;
  result.point = value;
  return self;
}
- (AnteUpResultRes_Builder*) clearPoint {
  result.hasPoint = NO;
  result.point = 0;
  return self;
}
- (NSArray*) anteUpUserInfosList {
  if (result.mutableAnteUpUserInfosList == nil) { return [NSArray array]; }
  return result.mutableAnteUpUserInfosList;
}
- (AnteUpUserInfo*) anteUpUserInfosAtIndex:(int32_t) index {
  return [result anteUpUserInfosAtIndex:index];
}
- (AnteUpResultRes_Builder*) replaceAnteUpUserInfosAtIndex:(int32_t) index with:(AnteUpUserInfo*) value {
  [result.mutableAnteUpUserInfosList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (AnteUpResultRes_Builder*) addAllAnteUpUserInfos:(NSArray*) values {
  if (result.mutableAnteUpUserInfosList == nil) {
    result.mutableAnteUpUserInfosList = [NSMutableArray array];
  }
  [result.mutableAnteUpUserInfosList addObjectsFromArray:values];
  return self;
}
- (AnteUpResultRes_Builder*) clearAnteUpUserInfosList {
  result.mutableAnteUpUserInfosList = nil;
  return self;
}
- (AnteUpResultRes_Builder*) addAnteUpUserInfos:(AnteUpUserInfo*) value {
  if (result.mutableAnteUpUserInfosList == nil) {
    result.mutableAnteUpUserInfosList = [NSMutableArray array];
  }
  [result.mutableAnteUpUserInfosList addObject:value];
  return self;
}
@end

