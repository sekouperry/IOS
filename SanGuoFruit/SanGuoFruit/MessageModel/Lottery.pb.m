// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Lottery.pb.h"

@implementation LotteryRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [LotteryRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface GetLotteryListReq ()
@end

@implementation GetLotteryListReq

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static GetLotteryListReq* defaultGetLotteryListReqInstance = nil;
+ (void) initialize {
  if (self == [GetLotteryListReq class]) {
    defaultGetLotteryListReqInstance = [[GetLotteryListReq alloc] init];
  }
}
+ (GetLotteryListReq*) defaultInstance {
  return defaultGetLotteryListReqInstance;
}
- (GetLotteryListReq*) defaultInstance {
  return defaultGetLotteryListReqInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (GetLotteryListReq*) parseFromData:(NSData*) data {
  return (GetLotteryListReq*)[[[GetLotteryListReq builder] mergeFromData:data] build];
}
+ (GetLotteryListReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GetLotteryListReq*)[[[GetLotteryListReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (GetLotteryListReq*) parseFromInputStream:(NSInputStream*) input {
  return (GetLotteryListReq*)[[[GetLotteryListReq builder] mergeFromInputStream:input] build];
}
+ (GetLotteryListReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GetLotteryListReq*)[[[GetLotteryListReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GetLotteryListReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (GetLotteryListReq*)[[[GetLotteryListReq builder] mergeFromCodedInputStream:input] build];
}
+ (GetLotteryListReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GetLotteryListReq*)[[[GetLotteryListReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GetLotteryListReq_Builder*) builder {
  return [[[GetLotteryListReq_Builder alloc] init] autorelease];
}
+ (GetLotteryListReq_Builder*) builderWithPrototype:(GetLotteryListReq*) prototype {
  return [[GetLotteryListReq builder] mergeFrom:prototype];
}
- (GetLotteryListReq_Builder*) builder {
  return [GetLotteryListReq builder];
}
@end

@interface GetLotteryListReq_Builder()
@property (retain) GetLotteryListReq* result;
@end

@implementation GetLotteryListReq_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[GetLotteryListReq alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (GetLotteryListReq_Builder*) clear {
  self.result = [[[GetLotteryListReq alloc] init] autorelease];
  return self;
}
- (GetLotteryListReq_Builder*) clone {
  return [GetLotteryListReq builderWithPrototype:result];
}
- (GetLotteryListReq*) defaultInstance {
  return [GetLotteryListReq defaultInstance];
}
- (GetLotteryListReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (GetLotteryListReq*) buildPartial {
  GetLotteryListReq* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (GetLotteryListReq_Builder*) mergeFrom:(GetLotteryListReq*) other {
  if (other == [GetLotteryListReq defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (GetLotteryListReq_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (GetLotteryListReq_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface LotteryPrizeInfo ()
@property int32_t prizeId;
@property (retain) NSString* prizePic;
@property (retain) NSString* prizeName;
@end

@implementation LotteryPrizeInfo

- (BOOL) hasPrizeId {
  return !!hasPrizeId_;
}
- (void) setHasPrizeId:(BOOL) value {
  hasPrizeId_ = !!value;
}
@synthesize prizeId;
- (BOOL) hasPrizePic {
  return !!hasPrizePic_;
}
- (void) setHasPrizePic:(BOOL) value {
  hasPrizePic_ = !!value;
}
@synthesize prizePic;
- (BOOL) hasPrizeName {
  return !!hasPrizeName_;
}
- (void) setHasPrizeName:(BOOL) value {
  hasPrizeName_ = !!value;
}
@synthesize prizeName;
- (void) dealloc {
  self.prizePic = nil;
  self.prizeName = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.prizeId = 0;
    self.prizePic = @"";
    self.prizeName = @"";
  }
  return self;
}
static LotteryPrizeInfo* defaultLotteryPrizeInfoInstance = nil;
+ (void) initialize {
  if (self == [LotteryPrizeInfo class]) {
    defaultLotteryPrizeInfoInstance = [[LotteryPrizeInfo alloc] init];
  }
}
+ (LotteryPrizeInfo*) defaultInstance {
  return defaultLotteryPrizeInfoInstance;
}
- (LotteryPrizeInfo*) defaultInstance {
  return defaultLotteryPrizeInfoInstance;
}
- (BOOL) isInitialized {
  if (!self.hasPrizeId) {
    return NO;
  }
  if (!self.hasPrizePic) {
    return NO;
  }
  if (!self.hasPrizeName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPrizeId) {
    [output writeInt32:1 value:self.prizeId];
  }
  if (self.hasPrizePic) {
    [output writeString:2 value:self.prizePic];
  }
  if (self.hasPrizeName) {
    [output writeString:3 value:self.prizeName];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasPrizeId) {
    size += computeInt32Size(1, self.prizeId);
  }
  if (self.hasPrizePic) {
    size += computeStringSize(2, self.prizePic);
  }
  if (self.hasPrizeName) {
    size += computeStringSize(3, self.prizeName);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (LotteryPrizeInfo*) parseFromData:(NSData*) data {
  return (LotteryPrizeInfo*)[[[LotteryPrizeInfo builder] mergeFromData:data] build];
}
+ (LotteryPrizeInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LotteryPrizeInfo*)[[[LotteryPrizeInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (LotteryPrizeInfo*) parseFromInputStream:(NSInputStream*) input {
  return (LotteryPrizeInfo*)[[[LotteryPrizeInfo builder] mergeFromInputStream:input] build];
}
+ (LotteryPrizeInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LotteryPrizeInfo*)[[[LotteryPrizeInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LotteryPrizeInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (LotteryPrizeInfo*)[[[LotteryPrizeInfo builder] mergeFromCodedInputStream:input] build];
}
+ (LotteryPrizeInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LotteryPrizeInfo*)[[[LotteryPrizeInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LotteryPrizeInfo_Builder*) builder {
  return [[[LotteryPrizeInfo_Builder alloc] init] autorelease];
}
+ (LotteryPrizeInfo_Builder*) builderWithPrototype:(LotteryPrizeInfo*) prototype {
  return [[LotteryPrizeInfo builder] mergeFrom:prototype];
}
- (LotteryPrizeInfo_Builder*) builder {
  return [LotteryPrizeInfo builder];
}
@end

@interface LotteryPrizeInfo_Builder()
@property (retain) LotteryPrizeInfo* result;
@end

@implementation LotteryPrizeInfo_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[LotteryPrizeInfo alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (LotteryPrizeInfo_Builder*) clear {
  self.result = [[[LotteryPrizeInfo alloc] init] autorelease];
  return self;
}
- (LotteryPrizeInfo_Builder*) clone {
  return [LotteryPrizeInfo builderWithPrototype:result];
}
- (LotteryPrizeInfo*) defaultInstance {
  return [LotteryPrizeInfo defaultInstance];
}
- (LotteryPrizeInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (LotteryPrizeInfo*) buildPartial {
  LotteryPrizeInfo* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (LotteryPrizeInfo_Builder*) mergeFrom:(LotteryPrizeInfo*) other {
  if (other == [LotteryPrizeInfo defaultInstance]) {
    return self;
  }
  if (other.hasPrizeId) {
    [self setPrizeId:other.prizeId];
  }
  if (other.hasPrizePic) {
    [self setPrizePic:other.prizePic];
  }
  if (other.hasPrizeName) {
    [self setPrizeName:other.prizeName];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (LotteryPrizeInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (LotteryPrizeInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPrizeId:[input readInt32]];
        break;
      }
      case 18: {
        [self setPrizePic:[input readString]];
        break;
      }
      case 26: {
        [self setPrizeName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasPrizeId {
  return result.hasPrizeId;
}
- (int32_t) prizeId {
  return result.prizeId;
}
- (LotteryPrizeInfo_Builder*) setPrizeId:(int32_t) value {
  result.hasPrizeId = YES;
  result.prizeId = value;
  return self;
}
- (LotteryPrizeInfo_Builder*) clearPrizeId {
  result.hasPrizeId = NO;
  result.prizeId = 0;
  return self;
}
- (BOOL) hasPrizePic {
  return result.hasPrizePic;
}
- (NSString*) prizePic {
  return result.prizePic;
}
- (LotteryPrizeInfo_Builder*) setPrizePic:(NSString*) value {
  result.hasPrizePic = YES;
  result.prizePic = value;
  return self;
}
- (LotteryPrizeInfo_Builder*) clearPrizePic {
  result.hasPrizePic = NO;
  result.prizePic = @"";
  return self;
}
- (BOOL) hasPrizeName {
  return result.hasPrizeName;
}
- (NSString*) prizeName {
  return result.prizeName;
}
- (LotteryPrizeInfo_Builder*) setPrizeName:(NSString*) value {
  result.hasPrizeName = YES;
  result.prizeName = value;
  return self;
}
- (LotteryPrizeInfo_Builder*) clearPrizeName {
  result.hasPrizeName = NO;
  result.prizeName = @"";
  return self;
}
@end

@interface LotteryInfo ()
@property int32_t lotteryId;
@property (retain) NSString* lotteryName;
@property (retain) NSString* lotteryDesc;
@property (retain) NSString* lotteryCost;
@property (retain) NSMutableArray* mutablePrizesList;
@end

@implementation LotteryInfo

- (BOOL) hasLotteryId {
  return !!hasLotteryId_;
}
- (void) setHasLotteryId:(BOOL) value {
  hasLotteryId_ = !!value;
}
@synthesize lotteryId;
- (BOOL) hasLotteryName {
  return !!hasLotteryName_;
}
- (void) setHasLotteryName:(BOOL) value {
  hasLotteryName_ = !!value;
}
@synthesize lotteryName;
- (BOOL) hasLotteryDesc {
  return !!hasLotteryDesc_;
}
- (void) setHasLotteryDesc:(BOOL) value {
  hasLotteryDesc_ = !!value;
}
@synthesize lotteryDesc;
- (BOOL) hasLotteryCost {
  return !!hasLotteryCost_;
}
- (void) setHasLotteryCost:(BOOL) value {
  hasLotteryCost_ = !!value;
}
@synthesize lotteryCost;
@synthesize mutablePrizesList;
- (void) dealloc {
  self.lotteryName = nil;
  self.lotteryDesc = nil;
  self.lotteryCost = nil;
  self.mutablePrizesList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.lotteryId = 0;
    self.lotteryName = @"";
    self.lotteryDesc = @"";
    self.lotteryCost = @"";
  }
  return self;
}
static LotteryInfo* defaultLotteryInfoInstance = nil;
+ (void) initialize {
  if (self == [LotteryInfo class]) {
    defaultLotteryInfoInstance = [[LotteryInfo alloc] init];
  }
}
+ (LotteryInfo*) defaultInstance {
  return defaultLotteryInfoInstance;
}
- (LotteryInfo*) defaultInstance {
  return defaultLotteryInfoInstance;
}
- (NSArray*) prizesList {
  return mutablePrizesList;
}
- (NSString*) prizesAtIndex:(int32_t) index {
  id value = [mutablePrizesList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasLotteryId) {
    return NO;
  }
  if (!self.hasLotteryName) {
    return NO;
  }
  if (!self.hasLotteryDesc) {
    return NO;
  }
  if (!self.hasLotteryCost) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLotteryId) {
    [output writeInt32:1 value:self.lotteryId];
  }
  if (self.hasLotteryName) {
    [output writeString:2 value:self.lotteryName];
  }
  if (self.hasLotteryDesc) {
    [output writeString:3 value:self.lotteryDesc];
  }
  if (self.hasLotteryCost) {
    [output writeString:4 value:self.lotteryCost];
  }
  for (NSString* element in self.mutablePrizesList) {
    [output writeString:5 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasLotteryId) {
    size += computeInt32Size(1, self.lotteryId);
  }
  if (self.hasLotteryName) {
    size += computeStringSize(2, self.lotteryName);
  }
  if (self.hasLotteryDesc) {
    size += computeStringSize(3, self.lotteryDesc);
  }
  if (self.hasLotteryCost) {
    size += computeStringSize(4, self.lotteryCost);
  }
  {
    int32_t dataSize = 0;
    for (NSString* element in self.mutablePrizesList) {
      dataSize += computeStringSizeNoTag(element);
    }
    size += dataSize;
    size += 1 * self.mutablePrizesList.count;
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (LotteryInfo*) parseFromData:(NSData*) data {
  return (LotteryInfo*)[[[LotteryInfo builder] mergeFromData:data] build];
}
+ (LotteryInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LotteryInfo*)[[[LotteryInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (LotteryInfo*) parseFromInputStream:(NSInputStream*) input {
  return (LotteryInfo*)[[[LotteryInfo builder] mergeFromInputStream:input] build];
}
+ (LotteryInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LotteryInfo*)[[[LotteryInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LotteryInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (LotteryInfo*)[[[LotteryInfo builder] mergeFromCodedInputStream:input] build];
}
+ (LotteryInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LotteryInfo*)[[[LotteryInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LotteryInfo_Builder*) builder {
  return [[[LotteryInfo_Builder alloc] init] autorelease];
}
+ (LotteryInfo_Builder*) builderWithPrototype:(LotteryInfo*) prototype {
  return [[LotteryInfo builder] mergeFrom:prototype];
}
- (LotteryInfo_Builder*) builder {
  return [LotteryInfo builder];
}
@end

@interface LotteryInfo_Builder()
@property (retain) LotteryInfo* result;
@end

@implementation LotteryInfo_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[LotteryInfo alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (LotteryInfo_Builder*) clear {
  self.result = [[[LotteryInfo alloc] init] autorelease];
  return self;
}
- (LotteryInfo_Builder*) clone {
  return [LotteryInfo builderWithPrototype:result];
}
- (LotteryInfo*) defaultInstance {
  return [LotteryInfo defaultInstance];
}
- (LotteryInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (LotteryInfo*) buildPartial {
  LotteryInfo* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (LotteryInfo_Builder*) mergeFrom:(LotteryInfo*) other {
  if (other == [LotteryInfo defaultInstance]) {
    return self;
  }
  if (other.hasLotteryId) {
    [self setLotteryId:other.lotteryId];
  }
  if (other.hasLotteryName) {
    [self setLotteryName:other.lotteryName];
  }
  if (other.hasLotteryDesc) {
    [self setLotteryDesc:other.lotteryDesc];
  }
  if (other.hasLotteryCost) {
    [self setLotteryCost:other.lotteryCost];
  }
  if (other.mutablePrizesList.count > 0) {
    if (result.mutablePrizesList == nil) {
      result.mutablePrizesList = [NSMutableArray array];
    }
    [result.mutablePrizesList addObjectsFromArray:other.mutablePrizesList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (LotteryInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (LotteryInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setLotteryId:[input readInt32]];
        break;
      }
      case 18: {
        [self setLotteryName:[input readString]];
        break;
      }
      case 26: {
        [self setLotteryDesc:[input readString]];
        break;
      }
      case 34: {
        [self setLotteryCost:[input readString]];
        break;
      }
      case 42: {
        [self addPrizes:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasLotteryId {
  return result.hasLotteryId;
}
- (int32_t) lotteryId {
  return result.lotteryId;
}
- (LotteryInfo_Builder*) setLotteryId:(int32_t) value {
  result.hasLotteryId = YES;
  result.lotteryId = value;
  return self;
}
- (LotteryInfo_Builder*) clearLotteryId {
  result.hasLotteryId = NO;
  result.lotteryId = 0;
  return self;
}
- (BOOL) hasLotteryName {
  return result.hasLotteryName;
}
- (NSString*) lotteryName {
  return result.lotteryName;
}
- (LotteryInfo_Builder*) setLotteryName:(NSString*) value {
  result.hasLotteryName = YES;
  result.lotteryName = value;
  return self;
}
- (LotteryInfo_Builder*) clearLotteryName {
  result.hasLotteryName = NO;
  result.lotteryName = @"";
  return self;
}
- (BOOL) hasLotteryDesc {
  return result.hasLotteryDesc;
}
- (NSString*) lotteryDesc {
  return result.lotteryDesc;
}
- (LotteryInfo_Builder*) setLotteryDesc:(NSString*) value {
  result.hasLotteryDesc = YES;
  result.lotteryDesc = value;
  return self;
}
- (LotteryInfo_Builder*) clearLotteryDesc {
  result.hasLotteryDesc = NO;
  result.lotteryDesc = @"";
  return self;
}
- (BOOL) hasLotteryCost {
  return result.hasLotteryCost;
}
- (NSString*) lotteryCost {
  return result.lotteryCost;
}
- (LotteryInfo_Builder*) setLotteryCost:(NSString*) value {
  result.hasLotteryCost = YES;
  result.lotteryCost = value;
  return self;
}
- (LotteryInfo_Builder*) clearLotteryCost {
  result.hasLotteryCost = NO;
  result.lotteryCost = @"";
  return self;
}
- (NSArray*) prizesList {
  if (result.mutablePrizesList == nil) {
    return [NSArray array];
  }
  return result.mutablePrizesList;
}
- (NSString*) prizesAtIndex:(int32_t) index {
  return [result prizesAtIndex:index];
}
- (LotteryInfo_Builder*) replacePrizesAtIndex:(int32_t) index with:(NSString*) value {
  [result.mutablePrizesList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (LotteryInfo_Builder*) addPrizes:(NSString*) value {
  if (result.mutablePrizesList == nil) {
    result.mutablePrizesList = [NSMutableArray array];
  }
  [result.mutablePrizesList addObject:value];
  return self;
}
- (LotteryInfo_Builder*) addAllPrizes:(NSArray*) values {
  if (result.mutablePrizesList == nil) {
    result.mutablePrizesList = [NSMutableArray array];
  }
  [result.mutablePrizesList addObjectsFromArray:values];
  return self;
}
- (LotteryInfo_Builder*) clearPrizesList {
  result.mutablePrizesList = nil;
  return self;
}
@end

@interface GetLotteryListRes ()
@property int32_t lotteryCount;
@property (retain) NSMutableArray* mutableLotteryInfosList;
@end

@implementation GetLotteryListRes

- (BOOL) hasLotteryCount {
  return !!hasLotteryCount_;
}
- (void) setHasLotteryCount:(BOOL) value {
  hasLotteryCount_ = !!value;
}
@synthesize lotteryCount;
@synthesize mutableLotteryInfosList;
- (void) dealloc {
  self.mutableLotteryInfosList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.lotteryCount = 0;
  }
  return self;
}
static GetLotteryListRes* defaultGetLotteryListResInstance = nil;
+ (void) initialize {
  if (self == [GetLotteryListRes class]) {
    defaultGetLotteryListResInstance = [[GetLotteryListRes alloc] init];
  }
}
+ (GetLotteryListRes*) defaultInstance {
  return defaultGetLotteryListResInstance;
}
- (GetLotteryListRes*) defaultInstance {
  return defaultGetLotteryListResInstance;
}
- (NSArray*) lotteryInfosList {
  return mutableLotteryInfosList;
}
- (LotteryInfo*) lotteryInfosAtIndex:(int32_t) index {
  id value = [mutableLotteryInfosList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasLotteryCount) {
    return NO;
  }
  for (LotteryInfo* element in self.lotteryInfosList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLotteryCount) {
    [output writeInt32:1 value:self.lotteryCount];
  }
  for (LotteryInfo* element in self.lotteryInfosList) {
    [output writeMessage:2 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasLotteryCount) {
    size += computeInt32Size(1, self.lotteryCount);
  }
  for (LotteryInfo* element in self.lotteryInfosList) {
    size += computeMessageSize(2, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (GetLotteryListRes*) parseFromData:(NSData*) data {
  return (GetLotteryListRes*)[[[GetLotteryListRes builder] mergeFromData:data] build];
}
+ (GetLotteryListRes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GetLotteryListRes*)[[[GetLotteryListRes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (GetLotteryListRes*) parseFromInputStream:(NSInputStream*) input {
  return (GetLotteryListRes*)[[[GetLotteryListRes builder] mergeFromInputStream:input] build];
}
+ (GetLotteryListRes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GetLotteryListRes*)[[[GetLotteryListRes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GetLotteryListRes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (GetLotteryListRes*)[[[GetLotteryListRes builder] mergeFromCodedInputStream:input] build];
}
+ (GetLotteryListRes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GetLotteryListRes*)[[[GetLotteryListRes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GetLotteryListRes_Builder*) builder {
  return [[[GetLotteryListRes_Builder alloc] init] autorelease];
}
+ (GetLotteryListRes_Builder*) builderWithPrototype:(GetLotteryListRes*) prototype {
  return [[GetLotteryListRes builder] mergeFrom:prototype];
}
- (GetLotteryListRes_Builder*) builder {
  return [GetLotteryListRes builder];
}
@end

@interface GetLotteryListRes_Builder()
@property (retain) GetLotteryListRes* result;
@end

@implementation GetLotteryListRes_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[GetLotteryListRes alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (GetLotteryListRes_Builder*) clear {
  self.result = [[[GetLotteryListRes alloc] init] autorelease];
  return self;
}
- (GetLotteryListRes_Builder*) clone {
  return [GetLotteryListRes builderWithPrototype:result];
}
- (GetLotteryListRes*) defaultInstance {
  return [GetLotteryListRes defaultInstance];
}
- (GetLotteryListRes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (GetLotteryListRes*) buildPartial {
  GetLotteryListRes* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (GetLotteryListRes_Builder*) mergeFrom:(GetLotteryListRes*) other {
  if (other == [GetLotteryListRes defaultInstance]) {
    return self;
  }
  if (other.hasLotteryCount) {
    [self setLotteryCount:other.lotteryCount];
  }
  if (other.mutableLotteryInfosList.count > 0) {
    if (result.mutableLotteryInfosList == nil) {
      result.mutableLotteryInfosList = [NSMutableArray array];
    }
    [result.mutableLotteryInfosList addObjectsFromArray:other.mutableLotteryInfosList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (GetLotteryListRes_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (GetLotteryListRes_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setLotteryCount:[input readInt32]];
        break;
      }
      case 18: {
        LotteryInfo_Builder* subBuilder = [LotteryInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addLotteryInfos:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasLotteryCount {
  return result.hasLotteryCount;
}
- (int32_t) lotteryCount {
  return result.lotteryCount;
}
- (GetLotteryListRes_Builder*) setLotteryCount:(int32_t) value {
  result.hasLotteryCount = YES;
  result.lotteryCount = value;
  return self;
}
- (GetLotteryListRes_Builder*) clearLotteryCount {
  result.hasLotteryCount = NO;
  result.lotteryCount = 0;
  return self;
}
- (NSArray*) lotteryInfosList {
  if (result.mutableLotteryInfosList == nil) { return [NSArray array]; }
  return result.mutableLotteryInfosList;
}
- (LotteryInfo*) lotteryInfosAtIndex:(int32_t) index {
  return [result lotteryInfosAtIndex:index];
}
- (GetLotteryListRes_Builder*) replaceLotteryInfosAtIndex:(int32_t) index with:(LotteryInfo*) value {
  [result.mutableLotteryInfosList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (GetLotteryListRes_Builder*) addAllLotteryInfos:(NSArray*) values {
  if (result.mutableLotteryInfosList == nil) {
    result.mutableLotteryInfosList = [NSMutableArray array];
  }
  [result.mutableLotteryInfosList addObjectsFromArray:values];
  return self;
}
- (GetLotteryListRes_Builder*) clearLotteryInfosList {
  result.mutableLotteryInfosList = nil;
  return self;
}
- (GetLotteryListRes_Builder*) addLotteryInfos:(LotteryInfo*) value {
  if (result.mutableLotteryInfosList == nil) {
    result.mutableLotteryInfosList = [NSMutableArray array];
  }
  [result.mutableLotteryInfosList addObject:value];
  return self;
}
@end

@interface GetLotteryReq ()
@property int32_t lotteryId;
@end

@implementation GetLotteryReq

- (BOOL) hasLotteryId {
  return !!hasLotteryId_;
}
- (void) setHasLotteryId:(BOOL) value {
  hasLotteryId_ = !!value;
}
@synthesize lotteryId;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.lotteryId = 0;
  }
  return self;
}
static GetLotteryReq* defaultGetLotteryReqInstance = nil;
+ (void) initialize {
  if (self == [GetLotteryReq class]) {
    defaultGetLotteryReqInstance = [[GetLotteryReq alloc] init];
  }
}
+ (GetLotteryReq*) defaultInstance {
  return defaultGetLotteryReqInstance;
}
- (GetLotteryReq*) defaultInstance {
  return defaultGetLotteryReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasLotteryId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLotteryId) {
    [output writeInt32:1 value:self.lotteryId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasLotteryId) {
    size += computeInt32Size(1, self.lotteryId);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (GetLotteryReq*) parseFromData:(NSData*) data {
  return (GetLotteryReq*)[[[GetLotteryReq builder] mergeFromData:data] build];
}
+ (GetLotteryReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GetLotteryReq*)[[[GetLotteryReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (GetLotteryReq*) parseFromInputStream:(NSInputStream*) input {
  return (GetLotteryReq*)[[[GetLotteryReq builder] mergeFromInputStream:input] build];
}
+ (GetLotteryReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GetLotteryReq*)[[[GetLotteryReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GetLotteryReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (GetLotteryReq*)[[[GetLotteryReq builder] mergeFromCodedInputStream:input] build];
}
+ (GetLotteryReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GetLotteryReq*)[[[GetLotteryReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GetLotteryReq_Builder*) builder {
  return [[[GetLotteryReq_Builder alloc] init] autorelease];
}
+ (GetLotteryReq_Builder*) builderWithPrototype:(GetLotteryReq*) prototype {
  return [[GetLotteryReq builder] mergeFrom:prototype];
}
- (GetLotteryReq_Builder*) builder {
  return [GetLotteryReq builder];
}
@end

@interface GetLotteryReq_Builder()
@property (retain) GetLotteryReq* result;
@end

@implementation GetLotteryReq_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[GetLotteryReq alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (GetLotteryReq_Builder*) clear {
  self.result = [[[GetLotteryReq alloc] init] autorelease];
  return self;
}
- (GetLotteryReq_Builder*) clone {
  return [GetLotteryReq builderWithPrototype:result];
}
- (GetLotteryReq*) defaultInstance {
  return [GetLotteryReq defaultInstance];
}
- (GetLotteryReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (GetLotteryReq*) buildPartial {
  GetLotteryReq* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (GetLotteryReq_Builder*) mergeFrom:(GetLotteryReq*) other {
  if (other == [GetLotteryReq defaultInstance]) {
    return self;
  }
  if (other.hasLotteryId) {
    [self setLotteryId:other.lotteryId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (GetLotteryReq_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (GetLotteryReq_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setLotteryId:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasLotteryId {
  return result.hasLotteryId;
}
- (int32_t) lotteryId {
  return result.lotteryId;
}
- (GetLotteryReq_Builder*) setLotteryId:(int32_t) value {
  result.hasLotteryId = YES;
  result.lotteryId = value;
  return self;
}
- (GetLotteryReq_Builder*) clearLotteryId {
  result.hasLotteryId = NO;
  result.lotteryId = 0;
  return self;
}
@end

@interface GetLotteryRes ()
@property int32_t prizeId;
@property (retain) NSString* prizePic;
@property (retain) NSString* prizeName;
@end

@implementation GetLotteryRes

- (BOOL) hasPrizeId {
  return !!hasPrizeId_;
}
- (void) setHasPrizeId:(BOOL) value {
  hasPrizeId_ = !!value;
}
@synthesize prizeId;
- (BOOL) hasPrizePic {
  return !!hasPrizePic_;
}
- (void) setHasPrizePic:(BOOL) value {
  hasPrizePic_ = !!value;
}
@synthesize prizePic;
- (BOOL) hasPrizeName {
  return !!hasPrizeName_;
}
- (void) setHasPrizeName:(BOOL) value {
  hasPrizeName_ = !!value;
}
@synthesize prizeName;
- (void) dealloc {
  self.prizePic = nil;
  self.prizeName = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.prizeId = 0;
    self.prizePic = @"";
    self.prizeName = @"";
  }
  return self;
}
static GetLotteryRes* defaultGetLotteryResInstance = nil;
+ (void) initialize {
  if (self == [GetLotteryRes class]) {
    defaultGetLotteryResInstance = [[GetLotteryRes alloc] init];
  }
}
+ (GetLotteryRes*) defaultInstance {
  return defaultGetLotteryResInstance;
}
- (GetLotteryRes*) defaultInstance {
  return defaultGetLotteryResInstance;
}
- (BOOL) isInitialized {
  if (!self.hasPrizeId) {
    return NO;
  }
  if (!self.hasPrizePic) {
    return NO;
  }
  if (!self.hasPrizeName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPrizeId) {
    [output writeInt32:1 value:self.prizeId];
  }
  if (self.hasPrizePic) {
    [output writeString:2 value:self.prizePic];
  }
  if (self.hasPrizeName) {
    [output writeString:3 value:self.prizeName];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasPrizeId) {
    size += computeInt32Size(1, self.prizeId);
  }
  if (self.hasPrizePic) {
    size += computeStringSize(2, self.prizePic);
  }
  if (self.hasPrizeName) {
    size += computeStringSize(3, self.prizeName);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (GetLotteryRes*) parseFromData:(NSData*) data {
  return (GetLotteryRes*)[[[GetLotteryRes builder] mergeFromData:data] build];
}
+ (GetLotteryRes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GetLotteryRes*)[[[GetLotteryRes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (GetLotteryRes*) parseFromInputStream:(NSInputStream*) input {
  return (GetLotteryRes*)[[[GetLotteryRes builder] mergeFromInputStream:input] build];
}
+ (GetLotteryRes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GetLotteryRes*)[[[GetLotteryRes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GetLotteryRes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (GetLotteryRes*)[[[GetLotteryRes builder] mergeFromCodedInputStream:input] build];
}
+ (GetLotteryRes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GetLotteryRes*)[[[GetLotteryRes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GetLotteryRes_Builder*) builder {
  return [[[GetLotteryRes_Builder alloc] init] autorelease];
}
+ (GetLotteryRes_Builder*) builderWithPrototype:(GetLotteryRes*) prototype {
  return [[GetLotteryRes builder] mergeFrom:prototype];
}
- (GetLotteryRes_Builder*) builder {
  return [GetLotteryRes builder];
}
@end

@interface GetLotteryRes_Builder()
@property (retain) GetLotteryRes* result;
@end

@implementation GetLotteryRes_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[GetLotteryRes alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (GetLotteryRes_Builder*) clear {
  self.result = [[[GetLotteryRes alloc] init] autorelease];
  return self;
}
- (GetLotteryRes_Builder*) clone {
  return [GetLotteryRes builderWithPrototype:result];
}
- (GetLotteryRes*) defaultInstance {
  return [GetLotteryRes defaultInstance];
}
- (GetLotteryRes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (GetLotteryRes*) buildPartial {
  GetLotteryRes* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (GetLotteryRes_Builder*) mergeFrom:(GetLotteryRes*) other {
  if (other == [GetLotteryRes defaultInstance]) {
    return self;
  }
  if (other.hasPrizeId) {
    [self setPrizeId:other.prizeId];
  }
  if (other.hasPrizePic) {
    [self setPrizePic:other.prizePic];
  }
  if (other.hasPrizeName) {
    [self setPrizeName:other.prizeName];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (GetLotteryRes_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (GetLotteryRes_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPrizeId:[input readInt32]];
        break;
      }
      case 18: {
        [self setPrizePic:[input readString]];
        break;
      }
      case 26: {
        [self setPrizeName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasPrizeId {
  return result.hasPrizeId;
}
- (int32_t) prizeId {
  return result.prizeId;
}
- (GetLotteryRes_Builder*) setPrizeId:(int32_t) value {
  result.hasPrizeId = YES;
  result.prizeId = value;
  return self;
}
- (GetLotteryRes_Builder*) clearPrizeId {
  result.hasPrizeId = NO;
  result.prizeId = 0;
  return self;
}
- (BOOL) hasPrizePic {
  return result.hasPrizePic;
}
- (NSString*) prizePic {
  return result.prizePic;
}
- (GetLotteryRes_Builder*) setPrizePic:(NSString*) value {
  result.hasPrizePic = YES;
  result.prizePic = value;
  return self;
}
- (GetLotteryRes_Builder*) clearPrizePic {
  result.hasPrizePic = NO;
  result.prizePic = @"";
  return self;
}
- (BOOL) hasPrizeName {
  return result.hasPrizeName;
}
- (NSString*) prizeName {
  return result.prizeName;
}
- (GetLotteryRes_Builder*) setPrizeName:(NSString*) value {
  result.hasPrizeName = YES;
  result.prizeName = value;
  return self;
}
- (GetLotteryRes_Builder*) clearPrizeName {
  result.hasPrizeName = NO;
  result.prizeName = @"";
  return self;
}
@end

