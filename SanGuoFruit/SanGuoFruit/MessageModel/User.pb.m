// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "User.pb.h"

@implementation UserRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [UserRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface UserRegisterReq ()
@property (retain) NSString* uuid;
@property (retain) NSString* userName;
@property (retain) NSString* password;
@property int32_t versionCode;
@property int32_t robotModel;
@property int32_t platformCode;
@end

@implementation UserRegisterReq

- (BOOL) hasUuid {
  return !!hasUuid_;
}
- (void) setHasUuid:(BOOL) value {
  hasUuid_ = !!value;
}
@synthesize uuid;
- (BOOL) hasUserName {
  return !!hasUserName_;
}
- (void) setHasUserName:(BOOL) value {
  hasUserName_ = !!value;
}
@synthesize userName;
- (BOOL) hasPassword {
  return !!hasPassword_;
}
- (void) setHasPassword:(BOOL) value {
  hasPassword_ = !!value;
}
@synthesize password;
- (BOOL) hasVersionCode {
  return !!hasVersionCode_;
}
- (void) setHasVersionCode:(BOOL) value {
  hasVersionCode_ = !!value;
}
@synthesize versionCode;
- (BOOL) hasRobotModel {
  return !!hasRobotModel_;
}
- (void) setHasRobotModel:(BOOL) value {
  hasRobotModel_ = !!value;
}
@synthesize robotModel;
- (BOOL) hasPlatformCode {
  return !!hasPlatformCode_;
}
- (void) setHasPlatformCode:(BOOL) value {
  hasPlatformCode_ = !!value;
}
@synthesize platformCode;
- (void) dealloc {
  self.uuid = nil;
  self.userName = nil;
  self.password = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.uuid = @"";
    self.userName = @"";
    self.password = @"";
    self.versionCode = 0;
    self.robotModel = 0;
    self.platformCode = 0;
  }
  return self;
}
static UserRegisterReq* defaultUserRegisterReqInstance = nil;
+ (void) initialize {
  if (self == [UserRegisterReq class]) {
    defaultUserRegisterReqInstance = [[UserRegisterReq alloc] init];
  }
}
+ (UserRegisterReq*) defaultInstance {
  return defaultUserRegisterReqInstance;
}
- (UserRegisterReq*) defaultInstance {
  return defaultUserRegisterReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUuid) {
    return NO;
  }
  if (!self.hasVersionCode) {
    return NO;
  }
  if (!self.hasRobotModel) {
    return NO;
  }
  if (!self.hasPlatformCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUuid) {
    [output writeString:1 value:self.uuid];
  }
  if (self.hasUserName) {
    [output writeString:2 value:self.userName];
  }
  if (self.hasPassword) {
    [output writeString:3 value:self.password];
  }
  if (self.hasVersionCode) {
    [output writeInt32:4 value:self.versionCode];
  }
  if (self.hasRobotModel) {
    [output writeInt32:5 value:self.robotModel];
  }
  if (self.hasPlatformCode) {
    [output writeInt32:6 value:self.platformCode];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUuid) {
    size += computeStringSize(1, self.uuid);
  }
  if (self.hasUserName) {
    size += computeStringSize(2, self.userName);
  }
  if (self.hasPassword) {
    size += computeStringSize(3, self.password);
  }
  if (self.hasVersionCode) {
    size += computeInt32Size(4, self.versionCode);
  }
  if (self.hasRobotModel) {
    size += computeInt32Size(5, self.robotModel);
  }
  if (self.hasPlatformCode) {
    size += computeInt32Size(6, self.platformCode);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (UserRegisterReq*) parseFromData:(NSData*) data {
  return (UserRegisterReq*)[[[UserRegisterReq builder] mergeFromData:data] build];
}
+ (UserRegisterReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserRegisterReq*)[[[UserRegisterReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserRegisterReq*) parseFromInputStream:(NSInputStream*) input {
  return (UserRegisterReq*)[[[UserRegisterReq builder] mergeFromInputStream:input] build];
}
+ (UserRegisterReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserRegisterReq*)[[[UserRegisterReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserRegisterReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserRegisterReq*)[[[UserRegisterReq builder] mergeFromCodedInputStream:input] build];
}
+ (UserRegisterReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserRegisterReq*)[[[UserRegisterReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserRegisterReq_Builder*) builder {
  return [[[UserRegisterReq_Builder alloc] init] autorelease];
}
+ (UserRegisterReq_Builder*) builderWithPrototype:(UserRegisterReq*) prototype {
  return [[UserRegisterReq builder] mergeFrom:prototype];
}
- (UserRegisterReq_Builder*) builder {
  return [UserRegisterReq builder];
}
@end

@interface UserRegisterReq_Builder()
@property (retain) UserRegisterReq* result;
@end

@implementation UserRegisterReq_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[UserRegisterReq alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (UserRegisterReq_Builder*) clear {
  self.result = [[[UserRegisterReq alloc] init] autorelease];
  return self;
}
- (UserRegisterReq_Builder*) clone {
  return [UserRegisterReq builderWithPrototype:result];
}
- (UserRegisterReq*) defaultInstance {
  return [UserRegisterReq defaultInstance];
}
- (UserRegisterReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserRegisterReq*) buildPartial {
  UserRegisterReq* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (UserRegisterReq_Builder*) mergeFrom:(UserRegisterReq*) other {
  if (other == [UserRegisterReq defaultInstance]) {
    return self;
  }
  if (other.hasUuid) {
    [self setUuid:other.uuid];
  }
  if (other.hasUserName) {
    [self setUserName:other.userName];
  }
  if (other.hasPassword) {
    [self setPassword:other.password];
  }
  if (other.hasVersionCode) {
    [self setVersionCode:other.versionCode];
  }
  if (other.hasRobotModel) {
    [self setRobotModel:other.robotModel];
  }
  if (other.hasPlatformCode) {
    [self setPlatformCode:other.platformCode];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserRegisterReq_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserRegisterReq_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUuid:[input readString]];
        break;
      }
      case 18: {
        [self setUserName:[input readString]];
        break;
      }
      case 26: {
        [self setPassword:[input readString]];
        break;
      }
      case 32: {
        [self setVersionCode:[input readInt32]];
        break;
      }
      case 40: {
        [self setRobotModel:[input readInt32]];
        break;
      }
      case 48: {
        [self setPlatformCode:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUuid {
  return result.hasUuid;
}
- (NSString*) uuid {
  return result.uuid;
}
- (UserRegisterReq_Builder*) setUuid:(NSString*) value {
  result.hasUuid = YES;
  result.uuid = value;
  return self;
}
- (UserRegisterReq_Builder*) clearUuid {
  result.hasUuid = NO;
  result.uuid = @"";
  return self;
}
- (BOOL) hasUserName {
  return result.hasUserName;
}
- (NSString*) userName {
  return result.userName;
}
- (UserRegisterReq_Builder*) setUserName:(NSString*) value {
  result.hasUserName = YES;
  result.userName = value;
  return self;
}
- (UserRegisterReq_Builder*) clearUserName {
  result.hasUserName = NO;
  result.userName = @"";
  return self;
}
- (BOOL) hasPassword {
  return result.hasPassword;
}
- (NSString*) password {
  return result.password;
}
- (UserRegisterReq_Builder*) setPassword:(NSString*) value {
  result.hasPassword = YES;
  result.password = value;
  return self;
}
- (UserRegisterReq_Builder*) clearPassword {
  result.hasPassword = NO;
  result.password = @"";
  return self;
}
- (BOOL) hasVersionCode {
  return result.hasVersionCode;
}
- (int32_t) versionCode {
  return result.versionCode;
}
- (UserRegisterReq_Builder*) setVersionCode:(int32_t) value {
  result.hasVersionCode = YES;
  result.versionCode = value;
  return self;
}
- (UserRegisterReq_Builder*) clearVersionCode {
  result.hasVersionCode = NO;
  result.versionCode = 0;
  return self;
}
- (BOOL) hasRobotModel {
  return result.hasRobotModel;
}
- (int32_t) robotModel {
  return result.robotModel;
}
- (UserRegisterReq_Builder*) setRobotModel:(int32_t) value {
  result.hasRobotModel = YES;
  result.robotModel = value;
  return self;
}
- (UserRegisterReq_Builder*) clearRobotModel {
  result.hasRobotModel = NO;
  result.robotModel = 0;
  return self;
}
- (BOOL) hasPlatformCode {
  return result.hasPlatformCode;
}
- (int32_t) platformCode {
  return result.platformCode;
}
- (UserRegisterReq_Builder*) setPlatformCode:(int32_t) value {
  result.hasPlatformCode = YES;
  result.platformCode = value;
  return self;
}
- (UserRegisterReq_Builder*) clearPlatformCode {
  result.hasPlatformCode = NO;
  result.platformCode = 0;
  return self;
}
@end

@interface UserRegisterRes ()
@property int32_t userId;
@property (retain) NSString* userName;
@property (retain) NSString* password;
@property int32_t rank;
@property int64_t experience;
@property int64_t nextExperience;
@property int64_t coin;
@property int32_t lottery;
@property (retain) NSString* photoUrl;
@property int32_t vip;
@end

@implementation UserRegisterRes

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
- (BOOL) hasUserName {
  return !!hasUserName_;
}
- (void) setHasUserName:(BOOL) value {
  hasUserName_ = !!value;
}
@synthesize userName;
- (BOOL) hasPassword {
  return !!hasPassword_;
}
- (void) setHasPassword:(BOOL) value {
  hasPassword_ = !!value;
}
@synthesize password;
- (BOOL) hasRank {
  return !!hasRank_;
}
- (void) setHasRank:(BOOL) value {
  hasRank_ = !!value;
}
@synthesize rank;
- (BOOL) hasExperience {
  return !!hasExperience_;
}
- (void) setHasExperience:(BOOL) value {
  hasExperience_ = !!value;
}
@synthesize experience;
- (BOOL) hasNextExperience {
  return !!hasNextExperience_;
}
- (void) setHasNextExperience:(BOOL) value {
  hasNextExperience_ = !!value;
}
@synthesize nextExperience;
- (BOOL) hasCoin {
  return !!hasCoin_;
}
- (void) setHasCoin:(BOOL) value {
  hasCoin_ = !!value;
}
@synthesize coin;
- (BOOL) hasLottery {
  return !!hasLottery_;
}
- (void) setHasLottery:(BOOL) value {
  hasLottery_ = !!value;
}
@synthesize lottery;
- (BOOL) hasPhotoUrl {
  return !!hasPhotoUrl_;
}
- (void) setHasPhotoUrl:(BOOL) value {
  hasPhotoUrl_ = !!value;
}
@synthesize photoUrl;
- (BOOL) hasVip {
  return !!hasVip_;
}
- (void) setHasVip:(BOOL) value {
  hasVip_ = !!value;
}
@synthesize vip;
- (void) dealloc {
  self.userName = nil;
  self.password = nil;
  self.photoUrl = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.userName = @"";
    self.password = @"";
    self.rank = 0;
    self.experience = 0L;
    self.nextExperience = 0L;
    self.coin = 0L;
    self.lottery = 0;
    self.photoUrl = @"";
    self.vip = 0;
  }
  return self;
}
static UserRegisterRes* defaultUserRegisterResInstance = nil;
+ (void) initialize {
  if (self == [UserRegisterRes class]) {
    defaultUserRegisterResInstance = [[UserRegisterRes alloc] init];
  }
}
+ (UserRegisterRes*) defaultInstance {
  return defaultUserRegisterResInstance;
}
- (UserRegisterRes*) defaultInstance {
  return defaultUserRegisterResInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasUserName) {
    return NO;
  }
  if (!self.hasPassword) {
    return NO;
  }
  if (!self.hasRank) {
    return NO;
  }
  if (!self.hasExperience) {
    return NO;
  }
  if (!self.hasNextExperience) {
    return NO;
  }
  if (!self.hasCoin) {
    return NO;
  }
  if (!self.hasLottery) {
    return NO;
  }
  if (!self.hasPhotoUrl) {
    return NO;
  }
  if (!self.hasVip) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeInt32:1 value:self.userId];
  }
  if (self.hasUserName) {
    [output writeString:2 value:self.userName];
  }
  if (self.hasPassword) {
    [output writeString:3 value:self.password];
  }
  if (self.hasRank) {
    [output writeInt32:4 value:self.rank];
  }
  if (self.hasExperience) {
    [output writeInt64:5 value:self.experience];
  }
  if (self.hasNextExperience) {
    [output writeInt64:6 value:self.nextExperience];
  }
  if (self.hasCoin) {
    [output writeInt64:7 value:self.coin];
  }
  if (self.hasLottery) {
    [output writeInt32:8 value:self.lottery];
  }
  if (self.hasPhotoUrl) {
    [output writeString:9 value:self.photoUrl];
  }
  if (self.hasVip) {
    [output writeInt32:10 value:self.vip];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserId) {
    size += computeInt32Size(1, self.userId);
  }
  if (self.hasUserName) {
    size += computeStringSize(2, self.userName);
  }
  if (self.hasPassword) {
    size += computeStringSize(3, self.password);
  }
  if (self.hasRank) {
    size += computeInt32Size(4, self.rank);
  }
  if (self.hasExperience) {
    size += computeInt64Size(5, self.experience);
  }
  if (self.hasNextExperience) {
    size += computeInt64Size(6, self.nextExperience);
  }
  if (self.hasCoin) {
    size += computeInt64Size(7, self.coin);
  }
  if (self.hasLottery) {
    size += computeInt32Size(8, self.lottery);
  }
  if (self.hasPhotoUrl) {
    size += computeStringSize(9, self.photoUrl);
  }
  if (self.hasVip) {
    size += computeInt32Size(10, self.vip);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (UserRegisterRes*) parseFromData:(NSData*) data {
  return (UserRegisterRes*)[[[UserRegisterRes builder] mergeFromData:data] build];
}
+ (UserRegisterRes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserRegisterRes*)[[[UserRegisterRes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserRegisterRes*) parseFromInputStream:(NSInputStream*) input {
  return (UserRegisterRes*)[[[UserRegisterRes builder] mergeFromInputStream:input] build];
}
+ (UserRegisterRes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserRegisterRes*)[[[UserRegisterRes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserRegisterRes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserRegisterRes*)[[[UserRegisterRes builder] mergeFromCodedInputStream:input] build];
}
+ (UserRegisterRes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserRegisterRes*)[[[UserRegisterRes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserRegisterRes_Builder*) builder {
  return [[[UserRegisterRes_Builder alloc] init] autorelease];
}
+ (UserRegisterRes_Builder*) builderWithPrototype:(UserRegisterRes*) prototype {
  return [[UserRegisterRes builder] mergeFrom:prototype];
}
- (UserRegisterRes_Builder*) builder {
  return [UserRegisterRes builder];
}
@end

@interface UserRegisterRes_Builder()
@property (retain) UserRegisterRes* result;
@end

@implementation UserRegisterRes_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[UserRegisterRes alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (UserRegisterRes_Builder*) clear {
  self.result = [[[UserRegisterRes alloc] init] autorelease];
  return self;
}
- (UserRegisterRes_Builder*) clone {
  return [UserRegisterRes builderWithPrototype:result];
}
- (UserRegisterRes*) defaultInstance {
  return [UserRegisterRes defaultInstance];
}
- (UserRegisterRes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserRegisterRes*) buildPartial {
  UserRegisterRes* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (UserRegisterRes_Builder*) mergeFrom:(UserRegisterRes*) other {
  if (other == [UserRegisterRes defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasUserName) {
    [self setUserName:other.userName];
  }
  if (other.hasPassword) {
    [self setPassword:other.password];
  }
  if (other.hasRank) {
    [self setRank:other.rank];
  }
  if (other.hasExperience) {
    [self setExperience:other.experience];
  }
  if (other.hasNextExperience) {
    [self setNextExperience:other.nextExperience];
  }
  if (other.hasCoin) {
    [self setCoin:other.coin];
  }
  if (other.hasLottery) {
    [self setLottery:other.lottery];
  }
  if (other.hasPhotoUrl) {
    [self setPhotoUrl:other.photoUrl];
  }
  if (other.hasVip) {
    [self setVip:other.vip];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserRegisterRes_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserRegisterRes_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readInt32]];
        break;
      }
      case 18: {
        [self setUserName:[input readString]];
        break;
      }
      case 26: {
        [self setPassword:[input readString]];
        break;
      }
      case 32: {
        [self setRank:[input readInt32]];
        break;
      }
      case 40: {
        [self setExperience:[input readInt64]];
        break;
      }
      case 48: {
        [self setNextExperience:[input readInt64]];
        break;
      }
      case 56: {
        [self setCoin:[input readInt64]];
        break;
      }
      case 64: {
        [self setLottery:[input readInt32]];
        break;
      }
      case 74: {
        [self setPhotoUrl:[input readString]];
        break;
      }
      case 80: {
        [self setVip:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (int32_t) userId {
  return result.userId;
}
- (UserRegisterRes_Builder*) setUserId:(int32_t) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (UserRegisterRes_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = 0;
  return self;
}
- (BOOL) hasUserName {
  return result.hasUserName;
}
- (NSString*) userName {
  return result.userName;
}
- (UserRegisterRes_Builder*) setUserName:(NSString*) value {
  result.hasUserName = YES;
  result.userName = value;
  return self;
}
- (UserRegisterRes_Builder*) clearUserName {
  result.hasUserName = NO;
  result.userName = @"";
  return self;
}
- (BOOL) hasPassword {
  return result.hasPassword;
}
- (NSString*) password {
  return result.password;
}
- (UserRegisterRes_Builder*) setPassword:(NSString*) value {
  result.hasPassword = YES;
  result.password = value;
  return self;
}
- (UserRegisterRes_Builder*) clearPassword {
  result.hasPassword = NO;
  result.password = @"";
  return self;
}
- (BOOL) hasRank {
  return result.hasRank;
}
- (int32_t) rank {
  return result.rank;
}
- (UserRegisterRes_Builder*) setRank:(int32_t) value {
  result.hasRank = YES;
  result.rank = value;
  return self;
}
- (UserRegisterRes_Builder*) clearRank {
  result.hasRank = NO;
  result.rank = 0;
  return self;
}
- (BOOL) hasExperience {
  return result.hasExperience;
}
- (int64_t) experience {
  return result.experience;
}
- (UserRegisterRes_Builder*) setExperience:(int64_t) value {
  result.hasExperience = YES;
  result.experience = value;
  return self;
}
- (UserRegisterRes_Builder*) clearExperience {
  result.hasExperience = NO;
  result.experience = 0L;
  return self;
}
- (BOOL) hasNextExperience {
  return result.hasNextExperience;
}
- (int64_t) nextExperience {
  return result.nextExperience;
}
- (UserRegisterRes_Builder*) setNextExperience:(int64_t) value {
  result.hasNextExperience = YES;
  result.nextExperience = value;
  return self;
}
- (UserRegisterRes_Builder*) clearNextExperience {
  result.hasNextExperience = NO;
  result.nextExperience = 0L;
  return self;
}
- (BOOL) hasCoin {
  return result.hasCoin;
}
- (int64_t) coin {
  return result.coin;
}
- (UserRegisterRes_Builder*) setCoin:(int64_t) value {
  result.hasCoin = YES;
  result.coin = value;
  return self;
}
- (UserRegisterRes_Builder*) clearCoin {
  result.hasCoin = NO;
  result.coin = 0L;
  return self;
}
- (BOOL) hasLottery {
  return result.hasLottery;
}
- (int32_t) lottery {
  return result.lottery;
}
- (UserRegisterRes_Builder*) setLottery:(int32_t) value {
  result.hasLottery = YES;
  result.lottery = value;
  return self;
}
- (UserRegisterRes_Builder*) clearLottery {
  result.hasLottery = NO;
  result.lottery = 0;
  return self;
}
- (BOOL) hasPhotoUrl {
  return result.hasPhotoUrl;
}
- (NSString*) photoUrl {
  return result.photoUrl;
}
- (UserRegisterRes_Builder*) setPhotoUrl:(NSString*) value {
  result.hasPhotoUrl = YES;
  result.photoUrl = value;
  return self;
}
- (UserRegisterRes_Builder*) clearPhotoUrl {
  result.hasPhotoUrl = NO;
  result.photoUrl = @"";
  return self;
}
- (BOOL) hasVip {
  return result.hasVip;
}
- (int32_t) vip {
  return result.vip;
}
- (UserRegisterRes_Builder*) setVip:(int32_t) value {
  result.hasVip = YES;
  result.vip = value;
  return self;
}
- (UserRegisterRes_Builder*) clearVip {
  result.hasVip = NO;
  result.vip = 0;
  return self;
}
@end

@interface UserThreeBindReq ()
@property int32_t userId;
@property (retain) NSString* shareId;
@property int32_t shareType;
@property (retain) NSString* accessToken;
@property (retain) NSString* refreshToken;
@end

@implementation UserThreeBindReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
- (BOOL) hasShareId {
  return !!hasShareId_;
}
- (void) setHasShareId:(BOOL) value {
  hasShareId_ = !!value;
}
@synthesize shareId;
- (BOOL) hasShareType {
  return !!hasShareType_;
}
- (void) setHasShareType:(BOOL) value {
  hasShareType_ = !!value;
}
@synthesize shareType;
- (BOOL) hasAccessToken {
  return !!hasAccessToken_;
}
- (void) setHasAccessToken:(BOOL) value {
  hasAccessToken_ = !!value;
}
@synthesize accessToken;
- (BOOL) hasRefreshToken {
  return !!hasRefreshToken_;
}
- (void) setHasRefreshToken:(BOOL) value {
  hasRefreshToken_ = !!value;
}
@synthesize refreshToken;
- (void) dealloc {
  self.shareId = nil;
  self.accessToken = nil;
  self.refreshToken = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.shareId = @"";
    self.shareType = 0;
    self.accessToken = @"";
    self.refreshToken = @"";
  }
  return self;
}
static UserThreeBindReq* defaultUserThreeBindReqInstance = nil;
+ (void) initialize {
  if (self == [UserThreeBindReq class]) {
    defaultUserThreeBindReqInstance = [[UserThreeBindReq alloc] init];
  }
}
+ (UserThreeBindReq*) defaultInstance {
  return defaultUserThreeBindReqInstance;
}
- (UserThreeBindReq*) defaultInstance {
  return defaultUserThreeBindReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasShareId) {
    return NO;
  }
  if (!self.hasShareType) {
    return NO;
  }
  if (!self.hasAccessToken) {
    return NO;
  }
  if (!self.hasRefreshToken) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeInt32:1 value:self.userId];
  }
  if (self.hasShareId) {
    [output writeString:2 value:self.shareId];
  }
  if (self.hasShareType) {
    [output writeInt32:3 value:self.shareType];
  }
  if (self.hasAccessToken) {
    [output writeString:4 value:self.accessToken];
  }
  if (self.hasRefreshToken) {
    [output writeString:5 value:self.refreshToken];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserId) {
    size += computeInt32Size(1, self.userId);
  }
  if (self.hasShareId) {
    size += computeStringSize(2, self.shareId);
  }
  if (self.hasShareType) {
    size += computeInt32Size(3, self.shareType);
  }
  if (self.hasAccessToken) {
    size += computeStringSize(4, self.accessToken);
  }
  if (self.hasRefreshToken) {
    size += computeStringSize(5, self.refreshToken);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (UserThreeBindReq*) parseFromData:(NSData*) data {
  return (UserThreeBindReq*)[[[UserThreeBindReq builder] mergeFromData:data] build];
}
+ (UserThreeBindReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserThreeBindReq*)[[[UserThreeBindReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserThreeBindReq*) parseFromInputStream:(NSInputStream*) input {
  return (UserThreeBindReq*)[[[UserThreeBindReq builder] mergeFromInputStream:input] build];
}
+ (UserThreeBindReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserThreeBindReq*)[[[UserThreeBindReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserThreeBindReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserThreeBindReq*)[[[UserThreeBindReq builder] mergeFromCodedInputStream:input] build];
}
+ (UserThreeBindReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserThreeBindReq*)[[[UserThreeBindReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserThreeBindReq_Builder*) builder {
  return [[[UserThreeBindReq_Builder alloc] init] autorelease];
}
+ (UserThreeBindReq_Builder*) builderWithPrototype:(UserThreeBindReq*) prototype {
  return [[UserThreeBindReq builder] mergeFrom:prototype];
}
- (UserThreeBindReq_Builder*) builder {
  return [UserThreeBindReq builder];
}
@end

@interface UserThreeBindReq_Builder()
@property (retain) UserThreeBindReq* result;
@end

@implementation UserThreeBindReq_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[UserThreeBindReq alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (UserThreeBindReq_Builder*) clear {
  self.result = [[[UserThreeBindReq alloc] init] autorelease];
  return self;
}
- (UserThreeBindReq_Builder*) clone {
  return [UserThreeBindReq builderWithPrototype:result];
}
- (UserThreeBindReq*) defaultInstance {
  return [UserThreeBindReq defaultInstance];
}
- (UserThreeBindReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserThreeBindReq*) buildPartial {
  UserThreeBindReq* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (UserThreeBindReq_Builder*) mergeFrom:(UserThreeBindReq*) other {
  if (other == [UserThreeBindReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasShareId) {
    [self setShareId:other.shareId];
  }
  if (other.hasShareType) {
    [self setShareType:other.shareType];
  }
  if (other.hasAccessToken) {
    [self setAccessToken:other.accessToken];
  }
  if (other.hasRefreshToken) {
    [self setRefreshToken:other.refreshToken];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserThreeBindReq_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserThreeBindReq_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readInt32]];
        break;
      }
      case 18: {
        [self setShareId:[input readString]];
        break;
      }
      case 24: {
        [self setShareType:[input readInt32]];
        break;
      }
      case 34: {
        [self setAccessToken:[input readString]];
        break;
      }
      case 42: {
        [self setRefreshToken:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (int32_t) userId {
  return result.userId;
}
- (UserThreeBindReq_Builder*) setUserId:(int32_t) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (UserThreeBindReq_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = 0;
  return self;
}
- (BOOL) hasShareId {
  return result.hasShareId;
}
- (NSString*) shareId {
  return result.shareId;
}
- (UserThreeBindReq_Builder*) setShareId:(NSString*) value {
  result.hasShareId = YES;
  result.shareId = value;
  return self;
}
- (UserThreeBindReq_Builder*) clearShareId {
  result.hasShareId = NO;
  result.shareId = @"";
  return self;
}
- (BOOL) hasShareType {
  return result.hasShareType;
}
- (int32_t) shareType {
  return result.shareType;
}
- (UserThreeBindReq_Builder*) setShareType:(int32_t) value {
  result.hasShareType = YES;
  result.shareType = value;
  return self;
}
- (UserThreeBindReq_Builder*) clearShareType {
  result.hasShareType = NO;
  result.shareType = 0;
  return self;
}
- (BOOL) hasAccessToken {
  return result.hasAccessToken;
}
- (NSString*) accessToken {
  return result.accessToken;
}
- (UserThreeBindReq_Builder*) setAccessToken:(NSString*) value {
  result.hasAccessToken = YES;
  result.accessToken = value;
  return self;
}
- (UserThreeBindReq_Builder*) clearAccessToken {
  result.hasAccessToken = NO;
  result.accessToken = @"";
  return self;
}
- (BOOL) hasRefreshToken {
  return result.hasRefreshToken;
}
- (NSString*) refreshToken {
  return result.refreshToken;
}
- (UserThreeBindReq_Builder*) setRefreshToken:(NSString*) value {
  result.hasRefreshToken = YES;
  result.refreshToken = value;
  return self;
}
- (UserThreeBindReq_Builder*) clearRefreshToken {
  result.hasRefreshToken = NO;
  result.refreshToken = @"";
  return self;
}
@end

@interface UserThreeBindRes ()
@property int32_t status;
@property (retain) NSString* reason;
@end

@implementation UserThreeBindRes

- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) value {
  hasStatus_ = !!value;
}
@synthesize status;
- (BOOL) hasReason {
  return !!hasReason_;
}
- (void) setHasReason:(BOOL) value {
  hasReason_ = !!value;
}
@synthesize reason;
- (void) dealloc {
  self.reason = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.status = 0;
    self.reason = @"";
  }
  return self;
}
static UserThreeBindRes* defaultUserThreeBindResInstance = nil;
+ (void) initialize {
  if (self == [UserThreeBindRes class]) {
    defaultUserThreeBindResInstance = [[UserThreeBindRes alloc] init];
  }
}
+ (UserThreeBindRes*) defaultInstance {
  return defaultUserThreeBindResInstance;
}
- (UserThreeBindRes*) defaultInstance {
  return defaultUserThreeBindResInstance;
}
- (BOOL) isInitialized {
  if (!self.hasStatus) {
    return NO;
  }
  if (!self.hasReason) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasStatus) {
    [output writeInt32:1 value:self.status];
  }
  if (self.hasReason) {
    [output writeString:2 value:self.reason];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasStatus) {
    size += computeInt32Size(1, self.status);
  }
  if (self.hasReason) {
    size += computeStringSize(2, self.reason);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (UserThreeBindRes*) parseFromData:(NSData*) data {
  return (UserThreeBindRes*)[[[UserThreeBindRes builder] mergeFromData:data] build];
}
+ (UserThreeBindRes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserThreeBindRes*)[[[UserThreeBindRes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserThreeBindRes*) parseFromInputStream:(NSInputStream*) input {
  return (UserThreeBindRes*)[[[UserThreeBindRes builder] mergeFromInputStream:input] build];
}
+ (UserThreeBindRes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserThreeBindRes*)[[[UserThreeBindRes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserThreeBindRes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserThreeBindRes*)[[[UserThreeBindRes builder] mergeFromCodedInputStream:input] build];
}
+ (UserThreeBindRes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserThreeBindRes*)[[[UserThreeBindRes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserThreeBindRes_Builder*) builder {
  return [[[UserThreeBindRes_Builder alloc] init] autorelease];
}
+ (UserThreeBindRes_Builder*) builderWithPrototype:(UserThreeBindRes*) prototype {
  return [[UserThreeBindRes builder] mergeFrom:prototype];
}
- (UserThreeBindRes_Builder*) builder {
  return [UserThreeBindRes builder];
}
@end

@interface UserThreeBindRes_Builder()
@property (retain) UserThreeBindRes* result;
@end

@implementation UserThreeBindRes_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[UserThreeBindRes alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (UserThreeBindRes_Builder*) clear {
  self.result = [[[UserThreeBindRes alloc] init] autorelease];
  return self;
}
- (UserThreeBindRes_Builder*) clone {
  return [UserThreeBindRes builderWithPrototype:result];
}
- (UserThreeBindRes*) defaultInstance {
  return [UserThreeBindRes defaultInstance];
}
- (UserThreeBindRes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserThreeBindRes*) buildPartial {
  UserThreeBindRes* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (UserThreeBindRes_Builder*) mergeFrom:(UserThreeBindRes*) other {
  if (other == [UserThreeBindRes defaultInstance]) {
    return self;
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasReason) {
    [self setReason:other.reason];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserThreeBindRes_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserThreeBindRes_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setStatus:[input readInt32]];
        break;
      }
      case 18: {
        [self setReason:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasStatus {
  return result.hasStatus;
}
- (int32_t) status {
  return result.status;
}
- (UserThreeBindRes_Builder*) setStatus:(int32_t) value {
  result.hasStatus = YES;
  result.status = value;
  return self;
}
- (UserThreeBindRes_Builder*) clearStatus {
  result.hasStatus = NO;
  result.status = 0;
  return self;
}
- (BOOL) hasReason {
  return result.hasReason;
}
- (NSString*) reason {
  return result.reason;
}
- (UserThreeBindRes_Builder*) setReason:(NSString*) value {
  result.hasReason = YES;
  result.reason = value;
  return self;
}
- (UserThreeBindRes_Builder*) clearReason {
  result.hasReason = NO;
  result.reason = @"";
  return self;
}
@end

@interface UserLoginReq ()
@property (retain) NSString* uuid;
@property (retain) NSString* userName;
@property (retain) NSString* password;
@property int32_t versionCode;
@property int32_t platformCode;
@end

@implementation UserLoginReq

- (BOOL) hasUuid {
  return !!hasUuid_;
}
- (void) setHasUuid:(BOOL) value {
  hasUuid_ = !!value;
}
@synthesize uuid;
- (BOOL) hasUserName {
  return !!hasUserName_;
}
- (void) setHasUserName:(BOOL) value {
  hasUserName_ = !!value;
}
@synthesize userName;
- (BOOL) hasPassword {
  return !!hasPassword_;
}
- (void) setHasPassword:(BOOL) value {
  hasPassword_ = !!value;
}
@synthesize password;
- (BOOL) hasVersionCode {
  return !!hasVersionCode_;
}
- (void) setHasVersionCode:(BOOL) value {
  hasVersionCode_ = !!value;
}
@synthesize versionCode;
- (BOOL) hasPlatformCode {
  return !!hasPlatformCode_;
}
- (void) setHasPlatformCode:(BOOL) value {
  hasPlatformCode_ = !!value;
}
@synthesize platformCode;
- (void) dealloc {
  self.uuid = nil;
  self.userName = nil;
  self.password = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.uuid = @"";
    self.userName = @"";
    self.password = @"";
    self.versionCode = 0;
    self.platformCode = 0;
  }
  return self;
}
static UserLoginReq* defaultUserLoginReqInstance = nil;
+ (void) initialize {
  if (self == [UserLoginReq class]) {
    defaultUserLoginReqInstance = [[UserLoginReq alloc] init];
  }
}
+ (UserLoginReq*) defaultInstance {
  return defaultUserLoginReqInstance;
}
- (UserLoginReq*) defaultInstance {
  return defaultUserLoginReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUuid) {
    return NO;
  }
  if (!self.hasUserName) {
    return NO;
  }
  if (!self.hasPassword) {
    return NO;
  }
  if (!self.hasVersionCode) {
    return NO;
  }
  if (!self.hasPlatformCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUuid) {
    [output writeString:1 value:self.uuid];
  }
  if (self.hasUserName) {
    [output writeString:2 value:self.userName];
  }
  if (self.hasPassword) {
    [output writeString:3 value:self.password];
  }
  if (self.hasVersionCode) {
    [output writeInt32:4 value:self.versionCode];
  }
  if (self.hasPlatformCode) {
    [output writeInt32:5 value:self.platformCode];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUuid) {
    size += computeStringSize(1, self.uuid);
  }
  if (self.hasUserName) {
    size += computeStringSize(2, self.userName);
  }
  if (self.hasPassword) {
    size += computeStringSize(3, self.password);
  }
  if (self.hasVersionCode) {
    size += computeInt32Size(4, self.versionCode);
  }
  if (self.hasPlatformCode) {
    size += computeInt32Size(5, self.platformCode);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (UserLoginReq*) parseFromData:(NSData*) data {
  return (UserLoginReq*)[[[UserLoginReq builder] mergeFromData:data] build];
}
+ (UserLoginReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserLoginReq*)[[[UserLoginReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserLoginReq*) parseFromInputStream:(NSInputStream*) input {
  return (UserLoginReq*)[[[UserLoginReq builder] mergeFromInputStream:input] build];
}
+ (UserLoginReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserLoginReq*)[[[UserLoginReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserLoginReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserLoginReq*)[[[UserLoginReq builder] mergeFromCodedInputStream:input] build];
}
+ (UserLoginReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserLoginReq*)[[[UserLoginReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserLoginReq_Builder*) builder {
  return [[[UserLoginReq_Builder alloc] init] autorelease];
}
+ (UserLoginReq_Builder*) builderWithPrototype:(UserLoginReq*) prototype {
  return [[UserLoginReq builder] mergeFrom:prototype];
}
- (UserLoginReq_Builder*) builder {
  return [UserLoginReq builder];
}
@end

@interface UserLoginReq_Builder()
@property (retain) UserLoginReq* result;
@end

@implementation UserLoginReq_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[UserLoginReq alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (UserLoginReq_Builder*) clear {
  self.result = [[[UserLoginReq alloc] init] autorelease];
  return self;
}
- (UserLoginReq_Builder*) clone {
  return [UserLoginReq builderWithPrototype:result];
}
- (UserLoginReq*) defaultInstance {
  return [UserLoginReq defaultInstance];
}
- (UserLoginReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserLoginReq*) buildPartial {
  UserLoginReq* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (UserLoginReq_Builder*) mergeFrom:(UserLoginReq*) other {
  if (other == [UserLoginReq defaultInstance]) {
    return self;
  }
  if (other.hasUuid) {
    [self setUuid:other.uuid];
  }
  if (other.hasUserName) {
    [self setUserName:other.userName];
  }
  if (other.hasPassword) {
    [self setPassword:other.password];
  }
  if (other.hasVersionCode) {
    [self setVersionCode:other.versionCode];
  }
  if (other.hasPlatformCode) {
    [self setPlatformCode:other.platformCode];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserLoginReq_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserLoginReq_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUuid:[input readString]];
        break;
      }
      case 18: {
        [self setUserName:[input readString]];
        break;
      }
      case 26: {
        [self setPassword:[input readString]];
        break;
      }
      case 32: {
        [self setVersionCode:[input readInt32]];
        break;
      }
      case 40: {
        [self setPlatformCode:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUuid {
  return result.hasUuid;
}
- (NSString*) uuid {
  return result.uuid;
}
- (UserLoginReq_Builder*) setUuid:(NSString*) value {
  result.hasUuid = YES;
  result.uuid = value;
  return self;
}
- (UserLoginReq_Builder*) clearUuid {
  result.hasUuid = NO;
  result.uuid = @"";
  return self;
}
- (BOOL) hasUserName {
  return result.hasUserName;
}
- (NSString*) userName {
  return result.userName;
}
- (UserLoginReq_Builder*) setUserName:(NSString*) value {
  result.hasUserName = YES;
  result.userName = value;
  return self;
}
- (UserLoginReq_Builder*) clearUserName {
  result.hasUserName = NO;
  result.userName = @"";
  return self;
}
- (BOOL) hasPassword {
  return result.hasPassword;
}
- (NSString*) password {
  return result.password;
}
- (UserLoginReq_Builder*) setPassword:(NSString*) value {
  result.hasPassword = YES;
  result.password = value;
  return self;
}
- (UserLoginReq_Builder*) clearPassword {
  result.hasPassword = NO;
  result.password = @"";
  return self;
}
- (BOOL) hasVersionCode {
  return result.hasVersionCode;
}
- (int32_t) versionCode {
  return result.versionCode;
}
- (UserLoginReq_Builder*) setVersionCode:(int32_t) value {
  result.hasVersionCode = YES;
  result.versionCode = value;
  return self;
}
- (UserLoginReq_Builder*) clearVersionCode {
  result.hasVersionCode = NO;
  result.versionCode = 0;
  return self;
}
- (BOOL) hasPlatformCode {
  return result.hasPlatformCode;
}
- (int32_t) platformCode {
  return result.platformCode;
}
- (UserLoginReq_Builder*) setPlatformCode:(int32_t) value {
  result.hasPlatformCode = YES;
  result.platformCode = value;
  return self;
}
- (UserLoginReq_Builder*) clearPlatformCode {
  result.hasPlatformCode = NO;
  result.platformCode = 0;
  return self;
}
@end

@interface UserLoginRes ()
@property int32_t userId;
@property (retain) NSString* userName;
@property int32_t rank;
@property int64_t experience;
@property int64_t nextExperience;
@property int64_t coin;
@property int32_t lottery;
@property (retain) NSString* photoUrl;
@property int32_t vip;
@end

@implementation UserLoginRes

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
- (BOOL) hasUserName {
  return !!hasUserName_;
}
- (void) setHasUserName:(BOOL) value {
  hasUserName_ = !!value;
}
@synthesize userName;
- (BOOL) hasRank {
  return !!hasRank_;
}
- (void) setHasRank:(BOOL) value {
  hasRank_ = !!value;
}
@synthesize rank;
- (BOOL) hasExperience {
  return !!hasExperience_;
}
- (void) setHasExperience:(BOOL) value {
  hasExperience_ = !!value;
}
@synthesize experience;
- (BOOL) hasNextExperience {
  return !!hasNextExperience_;
}
- (void) setHasNextExperience:(BOOL) value {
  hasNextExperience_ = !!value;
}
@synthesize nextExperience;
- (BOOL) hasCoin {
  return !!hasCoin_;
}
- (void) setHasCoin:(BOOL) value {
  hasCoin_ = !!value;
}
@synthesize coin;
- (BOOL) hasLottery {
  return !!hasLottery_;
}
- (void) setHasLottery:(BOOL) value {
  hasLottery_ = !!value;
}
@synthesize lottery;
- (BOOL) hasPhotoUrl {
  return !!hasPhotoUrl_;
}
- (void) setHasPhotoUrl:(BOOL) value {
  hasPhotoUrl_ = !!value;
}
@synthesize photoUrl;
- (BOOL) hasVip {
  return !!hasVip_;
}
- (void) setHasVip:(BOOL) value {
  hasVip_ = !!value;
}
@synthesize vip;
- (void) dealloc {
  self.userName = nil;
  self.photoUrl = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.userName = @"";
    self.rank = 0;
    self.experience = 0L;
    self.nextExperience = 0L;
    self.coin = 0L;
    self.lottery = 0;
    self.photoUrl = @"";
    self.vip = 0;
  }
  return self;
}
static UserLoginRes* defaultUserLoginResInstance = nil;
+ (void) initialize {
  if (self == [UserLoginRes class]) {
    defaultUserLoginResInstance = [[UserLoginRes alloc] init];
  }
}
+ (UserLoginRes*) defaultInstance {
  return defaultUserLoginResInstance;
}
- (UserLoginRes*) defaultInstance {
  return defaultUserLoginResInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasUserName) {
    return NO;
  }
  if (!self.hasRank) {
    return NO;
  }
  if (!self.hasExperience) {
    return NO;
  }
  if (!self.hasNextExperience) {
    return NO;
  }
  if (!self.hasCoin) {
    return NO;
  }
  if (!self.hasLottery) {
    return NO;
  }
  if (!self.hasPhotoUrl) {
    return NO;
  }
  if (!self.hasVip) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeInt32:1 value:self.userId];
  }
  if (self.hasUserName) {
    [output writeString:2 value:self.userName];
  }
  if (self.hasRank) {
    [output writeInt32:3 value:self.rank];
  }
  if (self.hasExperience) {
    [output writeInt64:4 value:self.experience];
  }
  if (self.hasNextExperience) {
    [output writeInt64:5 value:self.nextExperience];
  }
  if (self.hasCoin) {
    [output writeInt64:6 value:self.coin];
  }
  if (self.hasLottery) {
    [output writeInt32:7 value:self.lottery];
  }
  if (self.hasPhotoUrl) {
    [output writeString:8 value:self.photoUrl];
  }
  if (self.hasVip) {
    [output writeInt32:9 value:self.vip];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserId) {
    size += computeInt32Size(1, self.userId);
  }
  if (self.hasUserName) {
    size += computeStringSize(2, self.userName);
  }
  if (self.hasRank) {
    size += computeInt32Size(3, self.rank);
  }
  if (self.hasExperience) {
    size += computeInt64Size(4, self.experience);
  }
  if (self.hasNextExperience) {
    size += computeInt64Size(5, self.nextExperience);
  }
  if (self.hasCoin) {
    size += computeInt64Size(6, self.coin);
  }
  if (self.hasLottery) {
    size += computeInt32Size(7, self.lottery);
  }
  if (self.hasPhotoUrl) {
    size += computeStringSize(8, self.photoUrl);
  }
  if (self.hasVip) {
    size += computeInt32Size(9, self.vip);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (UserLoginRes*) parseFromData:(NSData*) data {
  return (UserLoginRes*)[[[UserLoginRes builder] mergeFromData:data] build];
}
+ (UserLoginRes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserLoginRes*)[[[UserLoginRes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserLoginRes*) parseFromInputStream:(NSInputStream*) input {
  return (UserLoginRes*)[[[UserLoginRes builder] mergeFromInputStream:input] build];
}
+ (UserLoginRes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserLoginRes*)[[[UserLoginRes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserLoginRes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserLoginRes*)[[[UserLoginRes builder] mergeFromCodedInputStream:input] build];
}
+ (UserLoginRes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserLoginRes*)[[[UserLoginRes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserLoginRes_Builder*) builder {
  return [[[UserLoginRes_Builder alloc] init] autorelease];
}
+ (UserLoginRes_Builder*) builderWithPrototype:(UserLoginRes*) prototype {
  return [[UserLoginRes builder] mergeFrom:prototype];
}
- (UserLoginRes_Builder*) builder {
  return [UserLoginRes builder];
}
@end

@interface UserLoginRes_Builder()
@property (retain) UserLoginRes* result;
@end

@implementation UserLoginRes_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[UserLoginRes alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (UserLoginRes_Builder*) clear {
  self.result = [[[UserLoginRes alloc] init] autorelease];
  return self;
}
- (UserLoginRes_Builder*) clone {
  return [UserLoginRes builderWithPrototype:result];
}
- (UserLoginRes*) defaultInstance {
  return [UserLoginRes defaultInstance];
}
- (UserLoginRes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserLoginRes*) buildPartial {
  UserLoginRes* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (UserLoginRes_Builder*) mergeFrom:(UserLoginRes*) other {
  if (other == [UserLoginRes defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasUserName) {
    [self setUserName:other.userName];
  }
  if (other.hasRank) {
    [self setRank:other.rank];
  }
  if (other.hasExperience) {
    [self setExperience:other.experience];
  }
  if (other.hasNextExperience) {
    [self setNextExperience:other.nextExperience];
  }
  if (other.hasCoin) {
    [self setCoin:other.coin];
  }
  if (other.hasLottery) {
    [self setLottery:other.lottery];
  }
  if (other.hasPhotoUrl) {
    [self setPhotoUrl:other.photoUrl];
  }
  if (other.hasVip) {
    [self setVip:other.vip];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserLoginRes_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserLoginRes_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readInt32]];
        break;
      }
      case 18: {
        [self setUserName:[input readString]];
        break;
      }
      case 24: {
        [self setRank:[input readInt32]];
        break;
      }
      case 32: {
        [self setExperience:[input readInt64]];
        break;
      }
      case 40: {
        [self setNextExperience:[input readInt64]];
        break;
      }
      case 48: {
        [self setCoin:[input readInt64]];
        break;
      }
      case 56: {
        [self setLottery:[input readInt32]];
        break;
      }
      case 66: {
        [self setPhotoUrl:[input readString]];
        break;
      }
      case 72: {
        [self setVip:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (int32_t) userId {
  return result.userId;
}
- (UserLoginRes_Builder*) setUserId:(int32_t) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (UserLoginRes_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = 0;
  return self;
}
- (BOOL) hasUserName {
  return result.hasUserName;
}
- (NSString*) userName {
  return result.userName;
}
- (UserLoginRes_Builder*) setUserName:(NSString*) value {
  result.hasUserName = YES;
  result.userName = value;
  return self;
}
- (UserLoginRes_Builder*) clearUserName {
  result.hasUserName = NO;
  result.userName = @"";
  return self;
}
- (BOOL) hasRank {
  return result.hasRank;
}
- (int32_t) rank {
  return result.rank;
}
- (UserLoginRes_Builder*) setRank:(int32_t) value {
  result.hasRank = YES;
  result.rank = value;
  return self;
}
- (UserLoginRes_Builder*) clearRank {
  result.hasRank = NO;
  result.rank = 0;
  return self;
}
- (BOOL) hasExperience {
  return result.hasExperience;
}
- (int64_t) experience {
  return result.experience;
}
- (UserLoginRes_Builder*) setExperience:(int64_t) value {
  result.hasExperience = YES;
  result.experience = value;
  return self;
}
- (UserLoginRes_Builder*) clearExperience {
  result.hasExperience = NO;
  result.experience = 0L;
  return self;
}
- (BOOL) hasNextExperience {
  return result.hasNextExperience;
}
- (int64_t) nextExperience {
  return result.nextExperience;
}
- (UserLoginRes_Builder*) setNextExperience:(int64_t) value {
  result.hasNextExperience = YES;
  result.nextExperience = value;
  return self;
}
- (UserLoginRes_Builder*) clearNextExperience {
  result.hasNextExperience = NO;
  result.nextExperience = 0L;
  return self;
}
- (BOOL) hasCoin {
  return result.hasCoin;
}
- (int64_t) coin {
  return result.coin;
}
- (UserLoginRes_Builder*) setCoin:(int64_t) value {
  result.hasCoin = YES;
  result.coin = value;
  return self;
}
- (UserLoginRes_Builder*) clearCoin {
  result.hasCoin = NO;
  result.coin = 0L;
  return self;
}
- (BOOL) hasLottery {
  return result.hasLottery;
}
- (int32_t) lottery {
  return result.lottery;
}
- (UserLoginRes_Builder*) setLottery:(int32_t) value {
  result.hasLottery = YES;
  result.lottery = value;
  return self;
}
- (UserLoginRes_Builder*) clearLottery {
  result.hasLottery = NO;
  result.lottery = 0;
  return self;
}
- (BOOL) hasPhotoUrl {
  return result.hasPhotoUrl;
}
- (NSString*) photoUrl {
  return result.photoUrl;
}
- (UserLoginRes_Builder*) setPhotoUrl:(NSString*) value {
  result.hasPhotoUrl = YES;
  result.photoUrl = value;
  return self;
}
- (UserLoginRes_Builder*) clearPhotoUrl {
  result.hasPhotoUrl = NO;
  result.photoUrl = @"";
  return self;
}
- (BOOL) hasVip {
  return result.hasVip;
}
- (int32_t) vip {
  return result.vip;
}
- (UserLoginRes_Builder*) setVip:(int32_t) value {
  result.hasVip = YES;
  result.vip = value;
  return self;
}
- (UserLoginRes_Builder*) clearVip {
  result.hasVip = NO;
  result.vip = 0;
  return self;
}
@end

@interface UserAttribute ()
@property (retain) NSString* attribute;
@property (retain) NSString* data;
@end

@implementation UserAttribute

- (BOOL) hasAttribute {
  return !!hasAttribute_;
}
- (void) setHasAttribute:(BOOL) value {
  hasAttribute_ = !!value;
}
@synthesize attribute;
- (BOOL) hasData {
  return !!hasData_;
}
- (void) setHasData:(BOOL) value {
  hasData_ = !!value;
}
@synthesize data;
- (void) dealloc {
  self.attribute = nil;
  self.data = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.attribute = @"";
    self.data = @"";
  }
  return self;
}
static UserAttribute* defaultUserAttributeInstance = nil;
+ (void) initialize {
  if (self == [UserAttribute class]) {
    defaultUserAttributeInstance = [[UserAttribute alloc] init];
  }
}
+ (UserAttribute*) defaultInstance {
  return defaultUserAttributeInstance;
}
- (UserAttribute*) defaultInstance {
  return defaultUserAttributeInstance;
}
- (BOOL) isInitialized {
  if (!self.hasAttribute) {
    return NO;
  }
  if (!self.hasData) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAttribute) {
    [output writeString:1 value:self.attribute];
  }
  if (self.hasData) {
    [output writeString:2 value:self.data];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasAttribute) {
    size += computeStringSize(1, self.attribute);
  }
  if (self.hasData) {
    size += computeStringSize(2, self.data);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (UserAttribute*) parseFromData:(NSData*) data {
  return (UserAttribute*)[[[UserAttribute builder] mergeFromData:data] build];
}
+ (UserAttribute*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserAttribute*)[[[UserAttribute builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserAttribute*) parseFromInputStream:(NSInputStream*) input {
  return (UserAttribute*)[[[UserAttribute builder] mergeFromInputStream:input] build];
}
+ (UserAttribute*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserAttribute*)[[[UserAttribute builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserAttribute*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserAttribute*)[[[UserAttribute builder] mergeFromCodedInputStream:input] build];
}
+ (UserAttribute*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserAttribute*)[[[UserAttribute builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserAttribute_Builder*) builder {
  return [[[UserAttribute_Builder alloc] init] autorelease];
}
+ (UserAttribute_Builder*) builderWithPrototype:(UserAttribute*) prototype {
  return [[UserAttribute builder] mergeFrom:prototype];
}
- (UserAttribute_Builder*) builder {
  return [UserAttribute builder];
}
@end

@interface UserAttribute_Builder()
@property (retain) UserAttribute* result;
@end

@implementation UserAttribute_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[UserAttribute alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (UserAttribute_Builder*) clear {
  self.result = [[[UserAttribute alloc] init] autorelease];
  return self;
}
- (UserAttribute_Builder*) clone {
  return [UserAttribute builderWithPrototype:result];
}
- (UserAttribute*) defaultInstance {
  return [UserAttribute defaultInstance];
}
- (UserAttribute*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserAttribute*) buildPartial {
  UserAttribute* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (UserAttribute_Builder*) mergeFrom:(UserAttribute*) other {
  if (other == [UserAttribute defaultInstance]) {
    return self;
  }
  if (other.hasAttribute) {
    [self setAttribute:other.attribute];
  }
  if (other.hasData) {
    [self setData:other.data];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserAttribute_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserAttribute_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setAttribute:[input readString]];
        break;
      }
      case 18: {
        [self setData:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasAttribute {
  return result.hasAttribute;
}
- (NSString*) attribute {
  return result.attribute;
}
- (UserAttribute_Builder*) setAttribute:(NSString*) value {
  result.hasAttribute = YES;
  result.attribute = value;
  return self;
}
- (UserAttribute_Builder*) clearAttribute {
  result.hasAttribute = NO;
  result.attribute = @"";
  return self;
}
- (BOOL) hasData {
  return result.hasData;
}
- (NSString*) data {
  return result.data;
}
- (UserAttribute_Builder*) setData:(NSString*) value {
  result.hasData = YES;
  result.data = value;
  return self;
}
- (UserAttribute_Builder*) clearData {
  result.hasData = NO;
  result.data = @"";
  return self;
}
@end

@interface UserAttributeChangeRes ()
@property (retain) NSMutableArray* mutableAttributeList;
@end

@implementation UserAttributeChangeRes

@synthesize mutableAttributeList;
- (void) dealloc {
  self.mutableAttributeList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static UserAttributeChangeRes* defaultUserAttributeChangeResInstance = nil;
+ (void) initialize {
  if (self == [UserAttributeChangeRes class]) {
    defaultUserAttributeChangeResInstance = [[UserAttributeChangeRes alloc] init];
  }
}
+ (UserAttributeChangeRes*) defaultInstance {
  return defaultUserAttributeChangeResInstance;
}
- (UserAttributeChangeRes*) defaultInstance {
  return defaultUserAttributeChangeResInstance;
}
- (NSArray*) attributeList {
  return mutableAttributeList;
}
- (UserAttribute*) attributeAtIndex:(int32_t) index {
  id value = [mutableAttributeList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (UserAttribute* element in self.attributeList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (UserAttribute* element in self.attributeList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (UserAttribute* element in self.attributeList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (UserAttributeChangeRes*) parseFromData:(NSData*) data {
  return (UserAttributeChangeRes*)[[[UserAttributeChangeRes builder] mergeFromData:data] build];
}
+ (UserAttributeChangeRes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserAttributeChangeRes*)[[[UserAttributeChangeRes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserAttributeChangeRes*) parseFromInputStream:(NSInputStream*) input {
  return (UserAttributeChangeRes*)[[[UserAttributeChangeRes builder] mergeFromInputStream:input] build];
}
+ (UserAttributeChangeRes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserAttributeChangeRes*)[[[UserAttributeChangeRes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserAttributeChangeRes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserAttributeChangeRes*)[[[UserAttributeChangeRes builder] mergeFromCodedInputStream:input] build];
}
+ (UserAttributeChangeRes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserAttributeChangeRes*)[[[UserAttributeChangeRes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserAttributeChangeRes_Builder*) builder {
  return [[[UserAttributeChangeRes_Builder alloc] init] autorelease];
}
+ (UserAttributeChangeRes_Builder*) builderWithPrototype:(UserAttributeChangeRes*) prototype {
  return [[UserAttributeChangeRes builder] mergeFrom:prototype];
}
- (UserAttributeChangeRes_Builder*) builder {
  return [UserAttributeChangeRes builder];
}
@end

@interface UserAttributeChangeRes_Builder()
@property (retain) UserAttributeChangeRes* result;
@end

@implementation UserAttributeChangeRes_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[UserAttributeChangeRes alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (UserAttributeChangeRes_Builder*) clear {
  self.result = [[[UserAttributeChangeRes alloc] init] autorelease];
  return self;
}
- (UserAttributeChangeRes_Builder*) clone {
  return [UserAttributeChangeRes builderWithPrototype:result];
}
- (UserAttributeChangeRes*) defaultInstance {
  return [UserAttributeChangeRes defaultInstance];
}
- (UserAttributeChangeRes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserAttributeChangeRes*) buildPartial {
  UserAttributeChangeRes* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (UserAttributeChangeRes_Builder*) mergeFrom:(UserAttributeChangeRes*) other {
  if (other == [UserAttributeChangeRes defaultInstance]) {
    return self;
  }
  if (other.mutableAttributeList.count > 0) {
    if (result.mutableAttributeList == nil) {
      result.mutableAttributeList = [NSMutableArray array];
    }
    [result.mutableAttributeList addObjectsFromArray:other.mutableAttributeList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserAttributeChangeRes_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserAttributeChangeRes_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        UserAttribute_Builder* subBuilder = [UserAttribute builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAttribute:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) attributeList {
  if (result.mutableAttributeList == nil) { return [NSArray array]; }
  return result.mutableAttributeList;
}
- (UserAttribute*) attributeAtIndex:(int32_t) index {
  return [result attributeAtIndex:index];
}
- (UserAttributeChangeRes_Builder*) replaceAttributeAtIndex:(int32_t) index with:(UserAttribute*) value {
  [result.mutableAttributeList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (UserAttributeChangeRes_Builder*) addAllAttribute:(NSArray*) values {
  if (result.mutableAttributeList == nil) {
    result.mutableAttributeList = [NSMutableArray array];
  }
  [result.mutableAttributeList addObjectsFromArray:values];
  return self;
}
- (UserAttributeChangeRes_Builder*) clearAttributeList {
  result.mutableAttributeList = nil;
  return self;
}
- (UserAttributeChangeRes_Builder*) addAttribute:(UserAttribute*) value {
  if (result.mutableAttributeList == nil) {
    result.mutableAttributeList = [NSMutableArray array];
  }
  [result.mutableAttributeList addObject:value];
  return self;
}
@end

